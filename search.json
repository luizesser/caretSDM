[{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding New Algorithms to caretSDM","text":"caretSDM package leverages robust caret package core engine Species Distribution Modeling (SDM). integration means caretSDM limited pre-configured algorithms. modeling algorithm can used caret’s train function can also seamlessly integrated caretSDM workflow. vignette guide process adding new, custom algorithm caretSDM. use Mahalanobis Distance model, classic algorithm presence-SDMs, working example. process involves creating list object contains necessary components caret train, tune, predict model. deeper dive creating custom models caret, highly recommend consulting official caret documentation: Using Model train. First, let’s load caretSDM library set environment.","code":"library(caretSDM) library(dismo) #> Loading required package: raster #> Loading required package: sp set.seed(1)"},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"the-custom-model-structure","dir":"Articles","previous_headings":"","what":"The Custom Model Structure","title":"Adding New Algorithms to caretSDM","text":"add new algorithm, need create list R contains specific named elements. caret package uses list understand handle model. key components list, define Mahalanobis Distance example.","code":""},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"the-components-of-the-list","dir":"Articles","previous_headings":"The Custom Model Structure","what":"The Components of the List","title":"Adding New Algorithms to caretSDM","text":"core custom model list ’ll call mahal.dist. list bundles together everything caret needs. label: simple character string model’s name. library: character vector listing R packages required run model. Mahalanobis Distance, need dismo package. type: character vector indicating type prediction problem. SDM, typically \"Classification\". parameters: data frame defines model’s tuning parameters. row represents parameter include columns parameter name, class (e.g., “numeric”, “logical”), descriptive label. grid: function generates data frame tuning parameter combinations caret test. fit: main function trains model. takes predictor data (x), response variable (y), arguments, returns fitted model object. predict: function uses fitted model fit make predictions new data. prob: function generates class probabilities (e.g., probability presence pseudo-absence) new data. crucial evaluating models using metrics like AUC/ROC. levels: function returns class levels. caretSDM, \"presence\" \"pseudoabsence\". Let’s see components come together example.","code":""},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"example-mahalanobis-distance-algorithm","dir":"Articles","previous_headings":"The Custom Model Structure","what":"Example: Mahalanobis Distance Algorithm","title":"Adding New Algorithms to caretSDM","text":"complete code creating algo list Mahalanobis Distance model.","code":"mahal.dist <- list(   label = \"Mahalanobis Distance\",   library = \"dismo\",   loop = NULL,   type = c(\"Classification\", \"Regression\"),   levels = function(x) c(\"presence\", \"pseudoabsence\"),   parameters = data.frame(     parameter = c(\"abs\"),     class = c(\"logical\"),     label = c(\"Absolute absence\")   ),   grid = function(x, y, len = NULL, search = \"grid\") {     # We define a simple grid that will test both TRUE and FALSE for the 'abs' parameter.     if (search == \"grid\") {       out <- expand.grid(abs = c(TRUE, FALSE))     } else {       out <- expand.grid(abs = c(TRUE, FALSE))     }     return(out)   },   fit = function(x, y, wts, param, lev, last, classProbs, ...) {     # The 'fit' function uses 'dismo::mahal'.      # It's trained only on presence data.     model <- dismo::mahal(x = x[y == \"presence\", ])     # We return the model and the tuning parameter value.     result <- list(model = model, abs = param$abs)     return(result)   },   predict = function(modelFit, newdata, preProc = NULL, submodels = NULL) {     # 'predict' generates predictions for new data.     pred <- predict(modelFit$model, newdata)     # The output is converted to probabilities for both classes.     pred <- data.frame(presence = pred, pseudoabsence = 1 - pred)     # The 'abs' parameter determines the prediction type.     if (modelFit$abs) {       pred <- as.factor(ifelse(pred$presence > 0, \"presence\", \"pseudoabsence\"))     } else {       pred <- as.factor(colnames(pred)[apply(pred, 1, which.max)])     }     return(pred)   },   prob = function(modelFit, newdata, preProc = NULL, submodels = NULL) {     # 'prob' calculates the class probabilities.     prob <- predict(modelFit$model, newdata)     # It must return a data frame with column names matching the class levels.     prob <- data.frame(presence = prob, pseudoabsence = 1 - prob)     return(prob)   },   predictors = function(x, ...) {     colnames(x)   },   varImp = NULL,   tags = c(\"Distance\") )"},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"integrating-the-new-algorithm-into-caretsdm","dir":"Articles","previous_headings":"","what":"Integrating the New Algorithm into caretSDM","title":"Adding New Algorithms to caretSDM","text":"mahal.dist list defined, can now use directly train_sdm function. process built-algorithm, instead providing algorithm’s name string (e.g., \"rf\"), provide mahal.dist list object. Let’s walk minimal caretSDM workflow see action.","code":""},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"prepare-a-minimal-input_sdm-object","dir":"Articles","previous_headings":"Integrating the New Algorithm into caretSDM","what":"1. Prepare a Minimal input_sdm Object","title":"Adding New Algorithms to caretSDM","text":"’ll use data already included caretSDM package create simple input_sdm object. simulates pre-processing steps typical SDM analysis.","code":"# Create an sdm_area object sa <- sdm_area(parana,                 cell_size = 50000, # Using a coarse resolution for speed                crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Add predictors to the study area sa <- add_predictors(sa, bioc) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Format occurrences oc <- occurrences_sdm(occ, crs = 6933) oc <- join_area(oc, sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 3 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create the final input_sdm object i <- input_sdm(oc, sa)  # Generate pseudoabsences i <- pseudoabsences(i,                      method = \"bioclim\",                      n_set = 3)"},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"train-the-model-using-train_sdm","dir":"Articles","previous_headings":"Integrating the New Algorithm into caretSDM","what":"2. Train the Model using train_sdm","title":"Adding New Algorithms to caretSDM","text":"Now, call train_sdm pass custom mahal.dist list algo argument. also need define training control parameters using caret::trainControl. Let’s check output. printout shows “Mahalanobis Distance” successfully trained evaluated. Note algorithm name set name object passed algo: can also inspect model’s performance metrics.","code":"# Define training controls ctrl_sdm <- caret::trainControl(method = \"cv\",                                  number = 3,                                  classProbs = TRUE,                                 summaryFunction = summary_sdm,                                  savePredictions = \"final\")  # Train the model using our custom algorithm # Note that 'algo' is now our list object instead of a string i <- train_sdm(i,                 algo = mahal.dist,                 variables_selected = c(\"bio1\", \"bio4\", \"bio12\"), # Using only two variables for simplicity                ctrl = ctrl_sdm) #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:caretSDM': #>  #>     predictors i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 417  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 3  #>     Number of PAs in each set : 417  #> --------  Predictors  --------- #> Number of Predictors          : 7  #> Predictors Names              : GID0, CODIGOIB1, NOMEUF2, SIGLAUF3, bio1, bio4, bio12  #> -----------  Models  ---------- #> Algorithms Names              : mahal.dist  #> Variables Names               : bio1 bio4 bio12  #> Model Validation              : #>     Method                    : cv  #>     Number                    : 3  #>     Metrics                   : #> $`Araucaria angustifolia` #>         algo       ROC       TSS Sensitivity Specificity #> 1 mahal.dist 0.9979445 0.9529519   0.9922222   0.9841111 algorithms_used(i) #> [1] \"mahal.dist\" mean_validation_metrics(i) #> $`Araucaria angustifolia` #> # A tibble: 1 × 53 #>   algo       ROC   TSS Sensitivity Specificity `Pos Pred Value` `Neg Pred Value` #>   <chr>    <dbl> <dbl>       <dbl>       <dbl>            <dbl>            <dbl> #> 1 mahal.d… 0.998 0.953       0.992       0.984            0.999            0.870 #> # ℹ 46 more variables: Precision <dbl>, Recall <dbl>, F1 <dbl>, #> #   Prevalence <dbl>, `Detection Rate` <dbl>, `Detection Prevalence` <dbl>, #> #   `Balanced Accuracy` <dbl>, Accuracy <dbl>, Kappa <dbl>, #> #   AccuracyLower <dbl>, AccuracyUpper <dbl>, AccuracyNull <dbl>, #> #   AccuracyPValue <dbl>, McnemarPValue <dbl>, Positive <dbl>, Negative <dbl>, #> #   `True Positive` <dbl>, `False Positive` <dbl>, `True Negative` <dbl>, #> #   `False Negative` <dbl>, ROCSD <dbl>, TSSSD <dbl>, SensitivitySD <dbl>, …"},{"path":"https://luizesser.github.io/caretSDM/articles/Add-Algorithm.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Adding New Algorithms to caretSDM","text":"caretSDM package designed flexible extensible. leveraging power caret, can easily integrate virtually modeling algorithm Species Distribution Modeling workflow. key create well-defined list tells caret fit, predict, tune model. opens door using state---art algorithms custom-built models tailored specific research questions, within structured reproducible environment caretSDM.","code":""},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"caretSDM Workflow for Species Distribution Modeling","text":"caretSDM R package uses powerful caret package main engine obtain Species Distribution Models. One main attributes strong geoprocessing underlying functions provided stars package. show model species distributions using caretSDM function sdm_area polygon. also show apply PCA predictors scenarios avoid multicolinearity. aim modeling obtain current future distribution Araucaria angustifolia, keystone tree species South Brazil. First, need open library.","code":"library(caretSDM) start_time <- Sys.time() set.seed(1)"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-Processing","title":"caretSDM Workflow for Species Distribution Modeling","text":"obtain models, need climatic data species records. easily obtain data, two functions: WorldClim_data function downloads climatic variables WorldClim 2.1, widely used open-source database; way, GBIF_data function downloads species records GBIF, also widely used open-source database. can read running console ?GBIF_data ?WorldClim_data.","code":""},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"obtaining-species-records","dir":"Articles","previous_headings":"Pre-Processing","what":"Obtaining species records","title":"caretSDM Workflow for Species Distribution Modeling","text":"easy way get species data using caretSDM function GBIF_data, retrieves species records GBIF. Understandably, sources species data available, well data can result field work. sense, one can import R ’s data multiple ways, sure table must always three columns: species, decimalLongitude decimalLatitude. GBIF_data function can retrieve data ready included caretSDM, thus doubt format data, use GBIF_data function parameter as_df = TRUE retrieve example table. standard, GBIF_data function sets as_df = FALSE, makes function return occurrences object (). example code step : already occ object included package, output, filtered records match study area. Note coordinates metric CRS (EPSG: 6933).","code":"occ <- GBIF_data(c(\"Araucaria angustifolia\"), as_df = TRUE) occ |> head() #>                  species decimalLongitude decimalLatitude #> 1 Araucaria angustifolia         -5071809        -3259770 #> 2 Araucaria angustifolia         -4983891        -3283348 #> 3 Araucaria angustifolia         -4748996        -3142075 #> 4 Araucaria angustifolia         -4883188        -3092641 #> 5 Araucaria angustifolia         -4766386        -3227445 #> 6 Araucaria angustifolia         -4755861        -3139607"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"obtaining-climatic-data","dir":"Articles","previous_headings":"Pre-Processing","what":"Obtaining climatic data","title":"caretSDM Workflow for Species Distribution Modeling","text":"climatic data, first download import current data, used build models. WorldClim_data function argument set directory want save files. don’t set , files saved working directory (run getwd() find working directory) folder “input_data/WorldClim_data_current/”. period set “future”, saved “input_data/WorldClim_data_future/”. run script smaller resolution, aim show package works, use resolution 10 arc-minutes, coarse, quicker download run. previous section, already bioc object included package, output, masked match study area fewer variables.","code":"# Download current bioclimatic variables WorldClim_data(path = NULL,                 period = \"current\",                 variable = \"bioc\",                 resolution = 10)  # Import current bioclimatic variables to R bioc <- read_stars(list.files(\"input_data/WorldClim_data_current/\", full.names = T), along = \"band\", normalize_path = F) bioc #> stars object with 3 dimensions and 1 attribute #> attribute(s): #>              Min.  1st Qu.   Median     Mean 3rd Qu. Max. NA's #> current  14.58698 21.19678 298.9147 622.9417  1353.5 2368 1845 #> dimension(s): #>      from  to offset   delta refsys point              values x/y #> x     747 798   -180  0.1667 WGS 84 FALSE                NULL [x] #> y     670 706     90 -0.1667 WGS 84 FALSE                NULL [y] #> band    1   3     NA      NA     NA    NA bio1 , bio4 , bio12"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"defining-the-study-area","dir":"Articles","previous_headings":"Pre-Processing","what":"Defining the study area","title":"caretSDM Workflow for Species Distribution Modeling","text":"important step model building Species Distribution Models, definition accessible area (M BAM diagram). area can , Geographical Information Systems terms, example, delimitation habitat (polygon) river basin network (lines). Another broadly used approach use buffers around presences. buffer size translates potential distribution capabilities species. educational purposes, use simple polygon Parana state boundaries available caretSDM parana object (see ?parana information data)..  sdm_area function responsible create grid build models, key aspect caretSDM workflow. grid built, modelers can pass multiple rasters different resolutions, CRSs extents. package responsible rescale, transform crop every raster match grid. grid returned sdm_area function sdm_area class, class also keep environmental/climatic data (.e. “predictor variables”, “covariates”, “explanatory variables”, “features” “control variables”). class perform analysis using predictors. grid built using mostly first three arguments: (1) shape sf class, rasters stars, rasterStack SpatRaster class also allowed; (2) cell size grid; (3) Coordinate Reference System (CRS). Note cell size can metric depending CRS informed. important inform cell size bigger coarser raster used, otherwise rescaling process may return empty cells. rescaling can performed using GDAL (quicker less precise) stars package (slower precise). first address values cells calculating mean (continuous variables) median (categorical variables) values falling within cell. approach using stars thing, weighting area value within cell. arguments meaning see ?sdm_area. Note function returned four predictor variables (Predictor Names ). “predictors” actually columns included parana shape’s data table. One can filter variables using select_predictors function, , package automatically drop . can explore grid generated stored sdm_area object using functions mapview_grid() plot_grid().  Now study area, can assign predictor variables . , use add_predictors function, usually use fist two arguments, sdm_area build previous step RasterStack, SpatRaster stars object predictors data. Note add_predictors also gdal argument, works previous one sdm_area function. Predictors variables used train models. training models, need project models scenarios. Currently, don’t scenario sdm_area object. can address predictors data current scenario applying function add_scenario without considering argument. happens argument pred_as_scen standarly set TRUE. aiming project species distributions scenarios, can download data add way current data. current bioclimatic data, already included scen object package, output , masked match study area fewer variables (see ?scen information data). Now can add current future scenarios sdm_area object. meaning parameters see help file ?add_scenarios. adding scenarios, function test variables available scenarios, otherwise filter predictors (see warning ). See also provide stationary argument, modeler can inform variables change scenarios. variables can , e.g., soil variables. common modelers need subset variables inform models. can due statistical artifacts common quarter bioclimatic variables, causation subset, aiming variables causality effect species distribution. user may also want change scenarios names, predictors names retrieve predictors data. myriad functions can found package, help files functions ?add_predictors ?add_scenarios, also ?select_predictors.","code":"parana #> Simple feature collection with 1 feature and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -54.61834 ymin: -26.71679 xmax: -48.02308 ymax: -22.51621 #> Geodetic CRS:  WGS 84 #>   GID0 CODIGOIB1 NOMEUF2 SIGLAUF3                           geom #> 1   19        41  PARANA       PR MULTIPOLYGON (((-52.06416 -... parana |> select_predictors(NOMEUF2) |> plot() sa <- sdm_area(parana,                 cell_size = 25000,                 crs = 6933,                 variables_selected = NULL,                gdal = TRUE,                 crop_by = NULL,                 lines_as_sdm_area = FALSE) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. sa #>           caretSDM          #> ........................... #> Class                     : sdm_area #> Extent                    : -5276744 -3295037 -4626744 -2795037 (xmin, xmax, ymin, ymax) #> CRS                       : WGS 84 / NSIDC EASE-  #> Resolution                : (25000, 25000) (x, y) #> Number of Predictors      : 4  #> Predictors Names          : GID0, CODIGOIB1, NOMEUF2, SIGLAUF3 plot_grid(sa) sa <- add_predictors(sa,                       bioc,                       variables_selected = NULL,                       gdal = TRUE) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. sa #>           caretSDM          #> ........................... #> Class                     : sdm_area #> Extent                    : -5276744 -3295037 -4626744 -2795037 (xmin, xmax, ymin, ymax) #> CRS                       : WGS 84 / NSIDC EASE-  #> Resolution                : (25000, 25000) (x, y) #> Number of Predictors      : 7  #> Predictors Names          : GID0, CODIGOIB1, NOMEUF2, SIGLAUF3, bio1, bio4, bio12 add_scenarios(sa) WorldClim_data(path = NULL,                 period = \"future\",                 variable = \"bioc\",                year = \"2090\",                gcm = c(\"ca\", \"mi\"),                ssp = c(\"245\",\"585\"),                resolution = 10)  scen <- read_stars(list.files(\"input_data/WorldClim_data_future/\", full.names = T), along = \"band\", normalize_path = F) scen #> stars object with 3 dimensions and 4 attributes #> attribute(s): #>                 Min. 1st Qu. Median     Mean  3rd Qu.   Max. NA's #> ca_ssp245_2090  18.4  26.100 296.50 570.0926 1188.975 2049.2 1908 #> ca_ssp585_2090  22.2  31.275 293.25 516.0384 1033.150 1862.2 1908 #> mi_ssp245_2090  16.3  23.000 314.65 660.9749 1426.800 2414.8 1908 #> mi_ssp585_2090  17.9  24.500 323.45 702.6153 1534.100 2585.0 1908 #> dimension(s): #>      from  to offset   delta refsys point              values x/y #> x     747 798   -180  0.1667 WGS 84 FALSE                NULL [x] #> y     670 706     90 -0.1667 WGS 84 FALSE                NULL [y] #> band    1   3     NA      NA     NA    NA bio1 , bio4 , bio12 sa <- add_scenarios(sa,                      scen = scen,                      scenarios_names = NULL,                     pred_as_scen = TRUE,                     variables_selected = NULL,                      stationary = NULL) #> Warning: Some variables in `variables_selected` are not present in `scen`. #> ℹ Using only variables present in `scen`: bio1, bio4, and bio12 sa #>           caretSDM          #> ........................... #> Class                     : sdm_area #> Extent                    : -5276744 -3295037 -4626744 -2795037 (xmin, xmax, ymin, ymax) #> CRS                       : WGS 84 / NSIDC EASE-  #> Resolution                : (25000, 25000) (x, y) #> Number of Predictors      : 3  #> Predictors Names          : bio1, bio4, bio12  #> Number of Scenarios      : 5  #> Scenarios Names          : ca_ssp245_2090, ca_ssp585_2090, mi_ssp245_2090, mi_ssp585_2090, current"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"defining-the-occurrences-set-in-the-study-area","dir":"Articles","previous_headings":"Pre-Processing","what":"Defining the occurrences set in the study area","title":"caretSDM Workflow for Species Distribution Modeling","text":"caretSDM strong GIS background, necessary explicitly tell CRS data . assure every GIS transformation correct. occurrences_sdm function creates occurrences class (.e. “response variable”, “target” “label”) used occurrences’ transformations functions, pseudoabsences generation. reference, GBIF data crs = 4326, records stored occ object transformed 6933 (see ?occ information data).  next step assigns occurrences study area, excluding records outside study area NAs predictors.","code":"oc <- occurrences_sdm(occ, crs = 6933) oc #>         caretSDM        #> ....................... #> Class                 : occurrences #> Species Names         : Araucaria angustifolia  #> Number of presences   : 420  #> ================================= #> Data: #> Simple feature collection with 6 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -5071809 ymin: -3283348 xmax: -4748996 ymax: -3092641 #> Projected CRS: WGS 84 / NSIDC EASE-Grid 2.0 Global #>                  species                  geometry #> 1 Araucaria angustifolia POINT (-5071809 -3259770) #> 2 Araucaria angustifolia POINT (-4983891 -3283348) #> 3 Araucaria angustifolia POINT (-4748996 -3142075) #> 4 Araucaria angustifolia POINT (-4883188 -3092641) #> 5 Araucaria angustifolia POINT (-4766386 -3227445) #> 6 Araucaria angustifolia POINT (-4755861 -3139607) plot_occurrences(oc) oc <- join_area(oc, sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect."},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"the-input_sdm-class","dir":"Articles","previous_headings":"Pre-Processing","what":"The input_sdm class","title":"caretSDM Workflow for Species Distribution Modeling","text":"caretSDM use multiple classes perform analysis. Every time perform new analysis, objects keep information . Ideally, workflow one object throughout . input_sdm class key class workflow, every function orbitate. class puts occurrences, predictors, scenarios, models predictions together perform analysis possible two classes available. First, create object informing occurrences sdm_area.","code":"i <- input_sdm(oc, sa) i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 418  #> --------  Predictors  --------- #> Number of Predictors          : 3  #> Predictors Names              : bio1, bio4, bio12  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"data-cleaning-routine","dir":"Articles","previous_headings":"Pre-Processing","what":"Data cleaning routine","title":"caretSDM Workflow for Species Distribution Modeling","text":"first step workflow input_sdm object, clean occurrences data applying group functions package CoordinateCleaner. function, also provide way check environmental duplicates, including predictors object. function also checks records sea species terrestrial, note can switched studied species terrestrial. way caretSDM works, can always overwrite main input_sdm object update . function return new object previous information new information obtained data_clean function, note end Data Cleaning information Duplicated Cell method. method possible occurrence predictors data.","code":"i <- data_clean(i,                 capitals = TRUE,                 centroids = TRUE,                 duplicated = TRUE,                 identical = TRUE,                 institutions = TRUE,                 invalid = TRUE,                 terrestrial = TRUE) #> Cell_ids identified, removing duplicated cell_id. #> Testing country capitals #> Removed 0 records. #> Testing country centroids #> Removed 0 records. #> Testing duplicates #> Removed 0 records. #> Testing equal lat/lon #> Removed 0 records. #> Testing biodiversity institutions #> Removed 1 records. #> Testing coordinate validity #> Removed 0 records. #> Testing sea coordinates #> Reading layer `ne_110m_land' from data source `/tmp/RtmpLTcoP8/ne_110m_land.shp' using driver `ESRI Shapefile' #> Simple feature collection with 127 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #> Geodetic CRS:  WGS 84 #> Removed 0 records. #> Predictors identified, procceding with grid filter (removing NA and duplicated data)."},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"removing-multicolinearity-from-predictors-data","dir":"Articles","previous_headings":"Pre-Processing","what":"Removing multicolinearity from predictors’ data","title":"caretSDM Workflow for Species Distribution Modeling","text":"two main methods SDM literature consider multicolinearity predictors data. One use VIFs, caretSDM performed using vif_predictorsfunction. , users able perform variables selection usdm package. function wrapper usdm::vifcor, variables kept given maximum threshold colinearity. standard 0.5. example code demonstration: study, however, use PCA approach multicolinearity, synthesize environmental variability PCA-axis project axis geographic space use predictors. pca_predictors arguments input_sdm object. PCA-axis included predictors together raw variables. better visualize PCA parameters, users can run pca_summary get_pca_model functions, self-explanatory.","code":"i <- vif_predictors(i,                      th = 0.5,                      maxobservations = 5000,                      variables_selected = NULL) i <- pca_predictors(i, cumulative_proportion = 1) i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 84  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 6  #> Predictors Names              : bio1, bio4, bio12, PC1, PC2, PC3  #> PCA-transformed variables     : DONE  #> Cummulative proportion ( 1 ) : PC1, PC2, PC3  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current pca_summary(i) #> Importance of components: #>                             PC1      PC2     PC3 #> Standard deviation     209.3679 17.15444 1.59698 #> Proportion of Variance   0.9933  0.00667 0.00006 #> Cumulative Proportion    0.9933  0.99994 1.00000 get_pca_model(i) #> Standard deviations (1, .., p=3): #> [1] 209.367889  17.154439   1.596985 #>  #> Rotation (n x k) = (3 x 3): #>                PC1          PC2          PC3 #> bio1   0.003623821 -0.006130769 -0.999974640 #> bio4  -0.996624181 -0.082040097 -0.003108698 #> bio12 -0.082018958  0.996610173 -0.006407371"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"obtaining-pseudoabsence-data","dir":"Articles","previous_headings":"Pre-Processing","what":"Obtaining pseudoabsence data","title":"caretSDM Workflow for Species Distribution Modeling","text":"Pseudoabsence data stored occurrences object (inside input_sdm). generate , must inform parameters. Probably one important arguments function method. Currently, two methods implemented: “random”, takes random grid cells pseudoabsences; “bioclim” method, creates Surface Range Envelope (SRE) using presence records, binarizes projection SRE using th threshold retrieves pseudoabsences outside envelope. number pseudoabsences created can changed using n_pa parameter. set NULL, n_pa equal number occurrences (avoid imbalance issues). number sets pseudoabsences adjusted n_set parameter function. argument variables_selected inform variables want use build pseudoabsences/models. can either vector variables names previously performed selection method.","code":"i <- pseudoabsences(i,                      method = \"bioclim\",                      n_set = 10,                     n_pa = NULL,                     variables_selected = \"pca\",                     th = 0)  i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 84  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 84  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 6  #> Predictors Names              : bio1, bio4, bio12, PC1, PC2, PC3  #> PCA-transformed variables     : DONE  #> Cummulative proportion ( 1 ) : PC1, PC2, PC3  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current"},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"modeling-species-relationship-with-variables","dir":"Articles","previous_headings":"Processing","what":"Modeling species relationship with variables","title":"caretSDM Workflow for Species Distribution Modeling","text":"occurrences predictors data put together, can pass modeling. name suggests, caretSDM uses caret package underlying modeling procedure. familiar, caret easiest way perform Machine Learning analysis R. works setting modeling wrapper pass multiple packages can provide lot automation regarding algorithms fine-tuning, data spliting, pre-processing methods predictions. automated functions caret can altered using ctrl argument train_sdm function. See ?caret::trainControl options available. show use repeated crossvalidation method, defined caret::trainControl. Note , using algorithm first time, caret ask install relevant packages properly run algorithm.","code":"ctrl_sdm <- caret::trainControl(method = \"repeatedcv\",                                  number = 4,                                  repeats = 1,                                  classProbs = TRUE,                                 returnResamp = \"all\",                                  summaryFunction = summary_sdm,                                  savePredictions = \"all\")  i <- train_sdm(i,                 algo = c(\"naive_bayes\", \"kknn\"),                 variables_selected = \"pca\",                 ctrl=ctrl_sdm) |> suppressWarnings() #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:caretSDM': #>  #>     predictors i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 84  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 84  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 6  #> Predictors Names              : bio1, bio4, bio12, PC1, PC2, PC3  #> PCA-transformed variables     : DONE  #> Cummulative proportion ( 1 ) : PC1, PC2, PC3  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes kknn  #> Variables Names               : PC1 PC2 PC3  #> Model Validation              : #>     Method                    : repeatedcv  #>     Number                    : 4  #>     Metrics                   : #> $`Araucaria angustifolia` #>          algo       ROC       TSS Sensitivity Specificity #> 1        kknn 0.9716306 0.9012374     0.95815    0.942875 #> 2 naive_bayes 0.9855231 0.9069517     0.98800    0.921200"},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"predicting-species-distribution-in-given-scenarios","dir":"Articles","previous_headings":"Post-Processing","what":"Predicting species distribution in given scenarios","title":"caretSDM Workflow for Species Distribution Modeling","text":"Now models, can make predictions new scenarios. function predict_sdm incorporates also prediction ensembles (ensembles=TRUE standard). function predict models passes given validation threshold. validation metric set using metric th arguments. following example, metric set “ROC” th equal 0.9. means models ROC > 0.9 used predictions ensembles. print, possible see “Methods” “Predictions” section, informs ensemble types made: mean occurrence probability (mean_occ_prob; simple mean GCMs), mean occurrence probability weighted AUC/ROC (wmean_AUC; AUC/ROC values used weights), majority rule, committee average (committee_avg; sum binaries). Besides AUC/ROC metric, users can get every available metric model using following code commit “ROC”: Otherwise, mean validation metric values per algorithm can also obtained following code: building predictions, possible ensemble GCMs using gcms_ensembles function informing parameter gcms part scenarios_names() used ensemble gcms. example, scenarios names : c(\"ca_ssp245_2090\", \"ca_ssp585_2090\", \"mi_ssp245_2090\", \"mi_ssp585_2090\"). Thus, set parameter c(\"ca\", \"mi\") function searches scenarios names \"ca\" \"mi\" remove parts scenarios names. remains, example, : c(\"_ssp245_2090\", \"_ssp585_2090\", \"_ssp245_2090\", \"_ssp585_2090\"). , function ensembles scenarios new names (note , removing gcms abbreviation, remaining name repeats two times). end, ensembles named new names generated last step included object scenarios. Note now section “Predictions” two scenarios called _ssp245_2090 _ssp585_2090, GCM’s ensembles calculated.","code":"i <- predict_sdm(i,                  metric = \"ROC\",                  th = 0.9,                  tp = \"prob\",                  ensembles = TRUE) #> [1] \"Projecting: 1/5\" #> [1] \"Projecting: 2/5\" #> [1] \"Projecting: 3/5\" #> [1] \"Projecting: 4/5\" #> [1] \"Projecting: 5/5\" #> [1] \"Ensembling...\" #> [1] \"ca_ssp245_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"ca_ssp585_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"mi_ssp245_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"mi_ssp585_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"current\" #> [1] \"Araucaria angustifolia\" i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 84  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 84  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 6  #> Predictors Names              : bio1, bio4, bio12, PC1, PC2, PC3  #> PCA-transformed variables     : DONE  #> Cummulative proportion ( 1 ) : PC1, PC2, PC3  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes kknn  #> Variables Names               : PC1 PC2 PC3  #> Model Validation              : #>     Method                    : repeatedcv  #>     Number                    : 4  #>     Metrics                   : #> $`Araucaria angustifolia` #>          algo       ROC       TSS Sensitivity Specificity #> 1        kknn 0.9716306 0.9012374     0.95815    0.942875 #> 2 naive_bayes 0.9855231 0.9069517     0.98800    0.921200 #>  #> --------  Predictions  -------- #> Ensembles                     : #>     Scenarios                 : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #>     Methods                   : mean_occ_prob wmean_AUC committee_avg  #> Thresholds                    : #>     Method                    : threshold  #>     Criteria                  : 0.9 get_validation_metrics(i) #> $`Araucaria angustifolia` #>              algo       ROC       TSS Sensitivity Specificity Pos Pred Value #> m1.2         kknn 0.9815476 0.9511905     0.97600     0.97500        0.98800 #> m2.2         kknn 0.9530574 0.8898810     0.95200     0.93750        0.96525 #> m3.2         kknn 0.9870130 0.9188312     0.96425     0.95450        0.97675 #> m4.2         kknn 0.9642857 0.8652597     0.95225     0.91275        0.95475 #> m5.2         kknn 0.9707792 0.9188312     0.96425     0.95450        0.97550 #> m6.2         kknn 0.9909361 0.8979978     0.96400     0.93375        0.96475 #> m7.2         kknn 0.9696970 0.8796537     0.95225     0.92725        0.96575 #> m8.2         kknn 0.9623016 0.8996032     0.95225     0.94725        0.97675 #> m9.2         kknn 0.9626623 0.8841991     0.95225     0.93175        0.96750 #> m10.2        kknn 0.9740260 0.9069264     0.95200     0.95450        0.97600 #> m1.1  naive_bayes 0.9988095 0.9392857     0.98800     0.97500        0.98875 #> m2.1  naive_bayes 0.9871934 0.8990801     0.98800     0.91100        0.95575 #> m3.1  naive_bayes 0.9821429 0.9199134     0.98800     0.93175        0.96700 #> m4.1  naive_bayes 0.9731241 0.9218074     0.98800     0.93375        0.96700 #> m5.1  naive_bayes 0.9870130 0.9199134     0.98800     0.93175        0.96625 #> m6.1  naive_bayes 0.9848485 0.8971861     0.98800     0.90900        0.95500 #> m7.1  naive_bayes 0.9955628 0.8926407     0.98800     0.90450        0.95550 #> m8.1  naive_bayes 0.9714286 0.8853175     0.98800     0.89725        0.95500 #> m9.1  naive_bayes 0.9913420 0.8971861     0.98800     0.90900        0.95500 #> m10.1 naive_bayes 0.9837662 0.8971861     0.98800     0.90900        0.95475 #>       Neg Pred Value Precision  Recall      F1 Prevalence Detection Rate #> m1.2         0.95225   0.98800 0.97600 0.98200    0.68275        0.66675 #> m2.2         0.91500   0.96525 0.95200 0.95850    0.64600        0.61550 #> m3.2         0.93875   0.97675 0.96425 0.96975    0.66125        0.63800 #> m4.2         0.92725   0.95475 0.95225 0.95175    0.64600        0.61575 #> m5.2         0.94225   0.97550 0.96425 0.96925    0.65600        0.63250 #> m6.2         0.93575   0.96475 0.96400 0.96425    0.65100        0.62800 #> m7.2         0.91675   0.96575 0.95225 0.95850    0.66125        0.63025 #> m8.2         0.91450   0.97675 0.95225 0.96300    0.68275        0.65050 #> m9.2         0.91875   0.96750 0.95225 0.95800    0.65600        0.62475 #> m10.2        0.91300   0.97600 0.95200 0.96400    0.65600        0.62500 #> m1.1         0.97500   0.98875 0.98800 0.98225    0.68275        0.67475 #> m2.1         0.98075   0.95575 0.98800 0.97125    0.64600        0.63850 #> m3.1         0.97725   0.96700 0.98800 0.97700    0.66125        0.65350 #> m4.1         0.97925   0.96700 0.98800 0.97700    0.64600        0.63825 #> m5.1         0.97925   0.96625 0.98800 0.97675    0.65600        0.64825 #> m6.1         0.97925   0.95500 0.98800 0.97100    0.65100        0.64350 #> m7.1         0.97500   0.95550 0.98800 0.97125    0.66125        0.65350 #> m8.1         0.97500   0.95500 0.98800 0.97100    0.68275        0.67475 #> m9.1         0.97725   0.95500 0.98800 0.97100    0.65600        0.64825 #> m10.1        0.97500   0.95475 0.98800 0.97100    0.65600        0.64825 #>       Detection Prevalence Balanced Accuracy Accuracy   Kappa AccuracyLower #> m1.2               0.67475           0.97550  0.97575 0.94500       0.84775 #> m2.2               0.63825           0.94500  0.94650 0.88325       0.80775 #> m3.2               0.65375           0.95950  0.96125 0.91425       0.82750 #> m4.2               0.64700           0.93300  0.93900 0.86800       0.79750 #> m5.2               0.65625           0.95950  0.96100 0.91575       0.83250 #> m6.2               0.65900           0.94925  0.95375 0.89775       0.81650 #> m7.2               0.65425           0.93975  0.94475 0.87625       0.80300 #> m8.2               0.67525           0.95000  0.95100 0.89000       0.81050 #> m9.2               0.64825           0.94225  0.94525 0.87875       0.81050 #> m10.2              0.64050           0.95350  0.95350 0.89650       0.81500 #> m1.1               0.69100           0.96950  0.97575 0.94400       0.84775 #> m2.1               0.68475           0.94950  0.96175 0.91325       0.82850 #> m3.1               0.70050           0.96000  0.96875 0.92800       0.83850 #> m4.1               0.68500           0.96075  0.96925 0.93000       0.84150 #> m5.1               0.68800           0.96025  0.96900 0.92975       0.83800 #> m6.1               0.70600           0.94875  0.96125 0.91125       0.82900 #> m7.1               0.70900           0.94625  0.96025 0.90800       0.82950 #> m8.1               0.73175           0.94250  0.95925 0.90350       0.82200 #> m9.1               0.70350           0.94875  0.96125 0.91125       0.82825 #> m10.1              0.68750           0.94875  0.96100 0.91150       0.82925 #>       AccuracyUpper AccuracyNull AccuracyPValue McnemarPValue Positive Negative #> m1.2        0.99775      0.68275        0.00025     1.0000000       21     9.75 #> m2.2        0.99300      0.64600        0.00000     1.0000000       21    11.50 #> m3.2        0.99575      0.66125        0.00000     0.8266667       21    10.75 #> m4.2        0.99000      0.64600        0.00000     0.8120000       21    11.50 #> m5.2        0.99100      0.65600        0.00125     0.8085000       21    11.00 #> m6.2        0.99575      0.65100        0.00000     1.0000000       21    11.25 #> m7.2        0.99250      0.66125        0.00050     0.8700000       21    10.75 #> m8.2        0.99275      0.68275        0.00125     0.8120000       21     9.75 #> m9.2        0.98625      0.65600        0.00150     0.4325000       21    11.00 #> m10.2       0.99550      0.65600        0.00000     1.0000000       21    11.00 #> m1.1        0.99775      0.68275        0.00025     1.0000000       21     9.75 #> m2.1        0.99725      0.64600        0.00050     0.8700000       21    11.50 #> m3.1        0.99750      0.66125        0.00025     0.8266667       21    10.75 #> m4.1        0.99750      0.64600        0.00025     0.8700000       21    11.50 #> m5.1        0.99900      0.65600        0.00075     1.0000000       21    11.00 #> m6.1        0.99575      0.65100        0.00125     0.8266667       21    11.25 #> m7.1        0.99300      0.66125        0.00100     0.8120000       21    10.75 #> m8.1        0.99575      0.68275        0.00350     0.8266667       21     9.75 #> m9.1        0.99575      0.65600        0.00150     0.8266667       21    11.00 #> m10.1       0.99450      0.65600        0.00150     1.0000000       21    11.00 #>       True Positive False Positive True Negative False Negative      ROCSD #> m1.2          20.50           0.50          9.50           0.25 0.03690476 #> m2.2          20.00           1.00         10.75           0.75 0.04854347 #> m3.2          20.25           0.75         10.25           0.50 0.02317804 #> m4.2          20.00           1.00         10.50           1.00 0.04123930 #> m5.2          20.25           0.75         10.50           0.75 0.05844156 #> m6.2          20.25           0.75         10.50           1.00 0.02121863 #> m7.2          20.00           1.00         10.00           0.75 0.04310929 #> m8.2          20.00           1.00          9.25           0.75 0.04365079 #> m9.2          20.00           1.00         10.25           0.75 0.04319524 #> m10.2         20.00           1.00         10.50           0.50 0.03061068 #> m1.1          20.75           0.75          9.50           0.50 0.03260978 #> m2.1          20.75           0.50         10.50           1.75 0.02995821 #> m3.1          20.75           0.25         10.00           1.50 0.03571429 #> m4.1          20.75           0.25         10.75           1.50 0.06400608 #> m5.1          20.75           0.75         10.25           1.75 0.06734350 #> m6.1          20.75           0.25         10.25           2.00 0.03683365 #> m7.1          20.75           0.25          9.75           1.75 0.05945451 #> m8.1          20.75           0.25          8.75           1.75 0.04757273 #> m9.1          20.75           0.50         10.00           2.00 0.04990887 #> m10.1         20.75           0.75         10.00           1.75 0.02835966 #>            TSSSD SensitivitySD SpecificitySD Pos Pred ValueSD Neg Pred ValueSD #> m1.2  0.06959281    0.02771281    0.05000000       0.02400000      0.055259238 #> m2.2  0.07978559    0.00000000    0.07990202       0.04379783      0.004000000 #> m3.2  0.05822739    0.04552197    0.05253887       0.02687471      0.075256783 #> m4.2  0.05841149    0.06741105    0.06831483       0.03715172      0.095062699 #> m5.2  0.12182898    0.07150000    0.08712587       0.04273172      0.115500000 #> m6.2  0.05607812    0.02400000    0.07440878       0.03561250      0.042999031 #> m7.2  0.08416843    0.03878466    0.09506270       0.04233497      0.068178076 #> m8.2  0.07138005    0.06741105    0.06107577       0.02687471      0.110213429 #> m9.2  0.15208612    0.06741105    0.13650000       0.06500000      0.102811721 #> m10.2 0.05248639    0.00000000    0.05253887       0.02771281      0.004618802 #> m1.1  0.07407785    0.04552197    0.05773503       0.02687471      0.081785797 #> m2.1  0.09094773    0.02771281    0.07955082       0.03988734      0.055259238 #> m3.1  0.11356935    0.02400000    0.11748049       0.05353504      0.045500000 #> m4.1  0.07705737    0.02400000    0.08651927       0.04178516      0.050000000 #> m5.1  0.06926407    0.02400000    0.04550000       0.02300000      0.050000000 #> m6.1  0.12042809    0.02400000    0.13062669       0.05353504      0.045500000 #> m7.1  0.12454900    0.02400000    0.11051848       0.05141012      0.055500000 #> m8.1  0.11440690    0.02400000    0.09298880       0.04064788      0.062500000 #> m9.1  0.09566349    0.02771281    0.07430119       0.03558089      0.061075773 #> m10.1 0.13482607    0.02400000    0.15541209       0.06790864      0.050000000 #>       PrecisionSD   RecallSD       F1SD PrevalenceSD Detection RateSD #> m1.2   0.02400000 0.02771281 0.02297825   0.01150000       0.02681262 #> m2.2   0.04379783 0.00000000 0.02211334   0.01154701       0.01096966 #> m3.2   0.02687471 0.04552197 0.02361320   0.01050000       0.03628590 #> m4.2   0.03715172 0.06741105 0.02929590   0.01154701       0.05272808 #> m5.2   0.04273172 0.07150000 0.04750000   0.00000000       0.04700000 #> m6.2   0.03561250 0.02400000 0.01415097   0.01000000       0.02070427 #> m7.2   0.04233497 0.03878466 0.02321637   0.01050000       0.03442262 #> m8.2   0.02687471 0.06741105 0.03309582   0.01150000       0.04657252 #> m9.2   0.06500000 0.06741105 0.04883305   0.00000000       0.04431234 #> m10.2  0.02771281 0.00000000 0.01385641   0.00000000       0.00000000 #> m1.1   0.02687471 0.04552197 0.02289651   0.01150000       0.03069745 #> m2.1   0.03988734 0.02771281 0.02844146   0.01154701       0.02362908 #> m3.1   0.05353504 0.02400000 0.02839014   0.01050000       0.02142429 #> m4.1   0.04178516 0.02400000 0.02238117   0.01154701       0.01291962 #> m5.1   0.02300000 0.02400000 0.02350000   0.00000000       0.01550000 #> m6.1   0.05353504 0.02400000 0.02661297   0.01000000       0.02500000 #> m7.1   0.05141012 0.02400000 0.03473111   0.01050000       0.02142429 #> m8.1   0.04064788 0.02400000 0.03205724   0.01150000       0.02260347 #> m9.1   0.03558089 0.02771281 0.02957899   0.00000000       0.01789786 #> m10.1  0.06790864 0.02400000 0.02940521   0.00000000       0.01550000 #>       Detection PrevalenceSD Balanced AccuracySD AccuracySD    KappaSD #> m1.2              0.02260347          0.03488553 0.03107384 0.07068239 #> m2.2              0.01985573          0.03969047 0.02872281 0.06294641 #> m3.2              0.04198710          0.02903446 0.02968024 0.06490698 #> m4.2              0.06871681          0.02934848 0.03464102 0.07066824 #> m5.2              0.05103185          0.06097540 0.05979618 0.12851816 #> m6.2              0.04200794          0.02794489 0.01761391 0.03797697 #> m7.2              0.05850000          0.04195533 0.03040148 0.06717328 #> m8.2              0.06300992          0.03550587 0.04210305 0.09070465 #> m9.2              0.06471669          0.07594022 0.06447416 0.14527990 #> m10.2             0.01789786          0.02598076 0.01789786 0.04099187 #> m1.1              0.04026889          0.03711244 0.03107384 0.07103051 #> m2.1              0.04771443          0.04548535 0.03795941 0.08521884 #> m3.1              0.04213075          0.05666863 0.03934039 0.09241392 #> m4.1              0.04210602          0.03855191 0.03029851 0.06811999 #> m5.1              0.03150000          0.03500000 0.03150000 0.07050000 #> m6.1              0.06060253          0.06050551 0.03954217 0.09901347 #> m7.1              0.04057503          0.06236652 0.04740165 0.10866462 #> m8.1              0.03512241          0.05718974 0.04549267 0.10986507 #> m9.1              0.03020348          0.04796092 0.04053805 0.09350401 #> m10.1             0.06743145          0.06748086 0.04053805 0.10062637 #>       AccuracyLowerSD AccuracyUpperSD AccuracyNullSD AccuracyPValueSD #> m1.2       0.04818281     0.003862210     0.01150000     0.0005000000 #> m2.2       0.03873306     0.008485281     0.01154701     0.0000000000 #> m3.2       0.04579301     0.004349329     0.01050000     0.0000000000 #> m4.2       0.04676537     0.010392305     0.01154701     0.0000000000 #> m5.2       0.08748714     0.017339742     0.00000000     0.0025000000 #> m6.2       0.02494661     0.003774917     0.01000000     0.0000000000 #> m7.2       0.04300388     0.008962886     0.01050000     0.0005773503 #> m8.2       0.06376258     0.009215024     0.01150000     0.0015000000 #> m9.2       0.09437690     0.017017148     0.00000000     0.0023804761 #> m10.2      0.02655811     0.004041452     0.00000000     0.0000000000 #> m1.1       0.04818281     0.003862210     0.01150000     0.0005000000 #> m2.1       0.05109468     0.014545904     0.01154701     0.0010000000 #> m3.1       0.05845511     0.008246211     0.01050000     0.0005000000 #> m4.1       0.04287968     0.008958236     0.01154701     0.0005000000 #> m5.1       0.04400000     0.009500000     0.00000000     0.0005000000 #> m6.1       0.05369978     0.015152008     0.01000000     0.0025000000 #> m7.1       0.07251896     0.010969655     0.01050000     0.0014142136 #> m8.1       0.06061559     0.016663333     0.01150000     0.0063508530 #> m9.1       0.05502424     0.014899664     0.00000000     0.0023804761 #> m10.1      0.05844299     0.014899664     0.00000000     0.0023804761 #>       McnemarPValueSD PositiveSD NegativeSD True PositiveSD False PositiveSD #> m1.2        0.0000000          0  0.5000000       0.5773503        0.5773503 #> m2.2        0.0000000          0  0.5773503       0.0000000        0.0000000 #> m3.2        0.3002221          0  0.5000000       0.9574271        0.9574271 #> m4.2        0.3760000          0  0.5773503       1.4142136        1.4142136 #> m5.2        0.2708219          0  0.0000000       1.5000000        1.5000000 #> m6.2        0.2600000          0  0.5000000       0.5000000        0.5000000 #> m7.2        0.2600000          0  0.5000000       0.8164966        0.8164966 #> m8.2        0.4341674          0  0.5000000       1.4142136        1.4142136 #> m9.2        0.2609224          0  0.0000000       1.4142136        1.4142136 #> m10.2       0.0000000          0  0.0000000       0.0000000        0.0000000 #> m1.1        0.3002221          0  0.5000000       0.9574271        0.9574271 #> m2.1        0.2666063          0  0.5773503       0.5773503        0.5773503 #> m3.1        0.3850818          0  0.5000000       0.5000000        0.5000000 #> m4.1        0.3002221          0  0.5773503       0.5000000        0.5000000 #> m5.1        0.0000000          0  0.0000000       0.5000000        0.5000000 #> m6.1        0.4243061          0  0.5000000       0.5000000        0.5000000 #> m7.1        0.3760000          0  0.5000000       0.5000000        0.5000000 #> m8.1        0.3002221          0  0.5000000       0.5000000        0.5000000 #> m9.1        0.3002221          0  0.0000000       0.5773503        0.5773503 #> m10.1       0.4330000          0  0.0000000       0.5000000        0.5000000 #>       True NegativeSD False NegativeSD #> m1.2        0.5773503        0.5000000 #> m2.2        0.5000000        0.9574271 #> m3.2        0.5000000        0.5773503 #> m4.2        1.0000000        0.8164966 #> m5.2        0.9574271        0.9574271 #> m6.2        0.9574271        0.8164966 #> m7.2        1.4142136        0.9574271 #> m8.2        0.9574271        0.5773503 #> m9.2        1.5000000        1.5000000 #> m10.2       0.5773503        0.5773503 #> m1.1        0.5773503        0.5773503 #> m2.1        1.2909944        0.9574271 #> m3.1        0.9574271        1.2909944 #> m4.1        1.2583057        0.9574271 #> m5.1        0.5000000        0.5000000 #> m6.1        1.7078251        1.4142136 #> m7.1        1.5000000        1.1547005 #> m8.1        0.9574271        0.9574271 #> m9.1        0.8164966        0.8164966 #> m10.1       1.7078251        1.7078251 mean_validation_metrics(i) #> $`Araucaria angustifolia` #> # A tibble: 2 × 53 #>   algo       ROC   TSS Sensitivity Specificity `Pos Pred Value` `Neg Pred Value` #>   <chr>    <dbl> <dbl>       <dbl>       <dbl>            <dbl>            <dbl> #> 1 kknn     0.972 0.901       0.958       0.943            0.971            0.927 #> 2 naive_b… 0.986 0.907       0.988       0.921            0.962            0.977 #> # ℹ 46 more variables: Precision <dbl>, Recall <dbl>, F1 <dbl>, #> #   Prevalence <dbl>, `Detection Rate` <dbl>, `Detection Prevalence` <dbl>, #> #   `Balanced Accuracy` <dbl>, Accuracy <dbl>, Kappa <dbl>, #> #   AccuracyLower <dbl>, AccuracyUpper <dbl>, AccuracyNull <dbl>, #> #   AccuracyPValue <dbl>, McnemarPValue <dbl>, Positive <dbl>, Negative <dbl>, #> #   `True Positive` <dbl>, `False Positive` <dbl>, `True Negative` <dbl>, #> #   `False Negative` <dbl>, ROCSD <dbl>, TSSSD <dbl>, SensitivitySD <dbl>, … i <- gcms_ensembles(i, gcms = c(\"ca\", \"mi\")) #> New names: #> New names: #> • `cell_id` -> `cell_id...1` #> • `mean_occ_prob` -> `mean_occ_prob...2` #> • `wmean_AUC` -> `wmean_AUC...3` #> • `committee_avg` -> `committee_avg...4` #> • `cell_id` -> `cell_id...5` #> • `mean_occ_prob` -> `mean_occ_prob...6` #> • `wmean_AUC` -> `wmean_AUC...7` #> • `committee_avg` -> `committee_avg...8` i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 84  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 84  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 6  #> Predictors Names              : bio1, bio4, bio12, PC1, PC2, PC3  #> PCA-transformed variables     : DONE  #> Cummulative proportion ( 1 ) : PC1, PC2, PC3  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes kknn  #> Variables Names               : PC1 PC2 PC3  #> Model Validation              : #>     Method                    : repeatedcv  #>     Number                    : 4  #>     Metrics                   : #> $`Araucaria angustifolia` #>          algo       ROC       TSS Sensitivity Specificity #> 1        kknn 0.9716306 0.9012374     0.95815    0.942875 #> 2 naive_bayes 0.9855231 0.9069517     0.98800    0.921200 #>  #> --------  Predictions  -------- #> Ensembles                     : #>     Scenarios                 : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current _ssp245_2090 _ssp585_2090  #>     Methods                   : mean_occ_prob wmean_AUC committee_avg  #> Thresholds                    : #>     Method                    : threshold  #>     Criteria                  : 0.9"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"plotting-results","dir":"Articles","previous_headings":"Post-Processing","what":"Plotting results","title":"caretSDM Workflow for Species Distribution Modeling","text":"plot results, prepared plot mapview functions. present plot versions due mapview limitations markdown, encourage users use mapview alternatives every time possible. , simply alternate “plot” portion functions “mapview”. example, plot_occurrences counterpart function mapview_occurrences set arguments functioning. plot_predictions, can set parameters control plotted. Probably important parameter scenario, user can change plot every different scenario projected. modeling one species can inform correct species plotted using spp_name parameter wealling debate separate projections can plot informing model id (see row names get_validation_metrics retrieve models ids).   Another plot widely used SDM studies Partial Dependence Plot, informs response curves variable. using PCA axes predictors, much sense plotting curves, someone want , possible pdp_sdm function.","code":"plot_predictions(i,                  spp_name = NULL,                  scenario = \"current\",                  id = NULL,                  ensemble = TRUE,                  ensemble_type = \"mean_occ_prob\") plot_predictions(i,                  spp_name = NULL,                  scenario = \"_ssp245_2090\",                  id = NULL,                  ensemble = TRUE,                  ensemble_type = \"mean_occ_prob\") pdp_sdm(i) #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"writing-results","dir":"Articles","previous_headings":"Post-Processing","what":"Writing results","title":"caretSDM Workflow for Species Distribution Modeling","text":"export caretSDM objects outputs R can use write functions. possibilities see help file ?write_ensembles. encourage users use standard path configuration, organizes outputs straightforward fashion. Common functions following:","code":"write_occurrences(i, path = \"results/occurrences.csv\", grid = FALSE) write_pseudoabsences(i, path = \"results/pseudoabsences\", ext = \".csv\", centroid = FALSE) write_grid(i, path = \"results/grid_study_area.gpkg\", centroid = FALSE) write_ensembles(i, path = \"results/ensembles\", ext = \".tif\")"},{"path":"https://luizesser.github.io/caretSDM/articles/Araucaria.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"caretSDM Workflow for Species Distribution Modeling","text":"vignette demonstrates build Species Distribution Models using caretSDM. vignette aimed terrestrial uses highlights use package using grid sdm_area. Alternative can seen vignettes(“Salminus”, “caretSDM”) build SDMs fish species using river lines simplefeatures object instead cells grid.","code":"end_time <- Sys.time() end_time - start_time #> Time difference of 1.981569 mins"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modeling Species Distributions in Continental Water Bodies","text":"caretSDM R package uses powerful caret package main engine obtain Species Distribution Models. One main attributes strong geoprocessing underlying functions provided stars package. show model species distributions using caretSDM function sdm_area lines predictor variables. also show apply VIF routine predictors scenarios avoid multicolinearity. aim modeling obtain current future distribution Salminus brasiliensis, key fish species South Brazil. First, need open library.","code":"library(caretSDM) start_time <- Sys.time() set.seed(1)"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-Processing","title":"Modeling Species Distributions in Continental Water Bodies","text":"obtain models, need climatic data species records. easily obtain data, two functions: WorldClim_data function downloads climatic variables WorldClim 2.1, widely used open-source database; way, GBIF_data function downloads species records GBIF, also widely used open-source database. can read running console ?GBIF_data ?WorldClim_data.","code":""},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"obtaining-species-records","dir":"Articles","previous_headings":"Pre-Processing","what":"Obtaining species records","title":"Modeling Species Distributions in Continental Water Bodies","text":"easy way get species data using caretSDM function GBIF_data, retrieves species records GBIF. Understandably, sources species data available, well data can result field work. sense, one can import R ’s data multiple ways, sure table must always three columns: species, decimalLongitude decimalLatitude. GBIF_data function can retrieve data ready included caretSDM, thus doubt format data, use GBIF_data function parameter as_df = TRUE retrieve example table. standard, GBIF_data function sets as_df = FALSE, makes function return occurrences object (). example code step : already salm object included package, output, filtered records match study area. Note coordinates metric CRS (EPSG: 6933).","code":"salm <- GBIF_data(c(\"Salminus brasiliensis\"), as_df = TRUE) salm |> head() #>                 species decimalLongitude decimalLatitude #> 1 Salminus brasiliensis         -5002956        -3034581 #> 2 Salminus brasiliensis         -5123570        -3049429 #> 3 Salminus brasiliensis         -5138591        -2830253 #> 4 Salminus brasiliensis         -5263273        -3143263 #> 5 Salminus brasiliensis         -5172118        -3156734 #> 6 Salminus brasiliensis         -5172118        -3156734"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"obtaining-climatic-data","dir":"Articles","previous_headings":"Pre-Processing","what":"Obtaining climatic data","title":"Modeling Species Distributions in Continental Water Bodies","text":"climatic data, first download import current data, used build models. WorldClim_data function argument set directory want save files. don’t set , files saved working directory (run getwd() find working directory) folder “input_data/WorldClim_data_current/”. period set “future”, saved “input_data/WorldClim_data_future/”. run script smaller resolution, aim show package works, use resolution 10 arc-minutes, coarse, quicker download run. previous section, already bioc object included package, output, masked match study area fewer variables.","code":"# Download current bioclimatic variables WorldClim_data(path = NULL,                 period = \"current\",                 variable = \"bioc\",                 resolution = 10)  # Import current bioclimatic variables to R bioc <- read_stars(list.files(\"input_data/WorldClim_data_current/\", full.names = T), along = \"band\", normalize_path = F) bioc #> stars object with 3 dimensions and 1 attribute #> attribute(s): #>              Min.  1st Qu.   Median     Mean 3rd Qu. Max. NA's #> current  14.58698 21.19678 298.9147 622.9417  1353.5 2368 1845 #> dimension(s): #>      from  to offset   delta refsys point              values x/y #> x     747 798   -180  0.1667 WGS 84 FALSE                NULL [x] #> y     670 706     90 -0.1667 WGS 84 FALSE                NULL [y] #> band    1   3     NA      NA     NA    NA bio1 , bio4 , bio12"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"defining-the-study-area","dir":"Articles","previous_headings":"Pre-Processing","what":"Defining the study area","title":"Modeling Species Distributions in Continental Water Bodies","text":"important step model building Species Distribution Models, definition accessible area (M BAM diagram). area can , Geographical Information Systems terms, example, delimitation habitat (polygon) river basin network (lines). Another broadly used approach use buffers around presences. buffer size translates potential distribution capabilities species. educational purposes, use simple polygon Parana state river network available caretSDM rivs object (see ?rivs information data)..  sdm_area function responsible create grid build models, key aspect caretSDM workflow. grid built, modelers can pass multiple rasters different resolutions, CRSs extents. package responsible rescale, transform crop every raster match grid. grid returned sdm_area function sdm_area class, class also keep environmental/climatic data (.e. “predictor variables”, “covariates”, “explanatory variables”, “features” “control variables”). class perform analysis using predictors. grid built using mostly first three arguments: (1) shape sf class, rasters stars, rasterStack SpatRaster class also allowed; (2) cell size grid; (3) Coordinate Reference System (CRS). Note cell size can metric depending CRS informed. important inform cell size bigger coarser raster used, otherwise rescaling process may return empty cells. rescaling can performed using GDAL (quicker less precise) stars package (slower precise). first address values cells calculating mean (continuous variables) median (categorical variables) values falling within cell. approach using stars thing, weighting area value within cell. However, using river network study area, .e. simple features object LINESTRING geometry types, can set argument lines_as_sdm_area = TRUE. chop lines within rivs (hydrological predictors) given grid cells built. words, segment line holds hydrological information, crosses two different cells, splitted two different lines hydrological data, different bioclimatic data. use lines_as_sdm_area = TRUE takes time run, precise continental water bodies modeling. arguments meaning see ?sdm_area. Note function returned two predictor variables (Predictor Names ). “predictors” actually columns included rivs shape’s data table. One can filter variables using select_predictors function, , variables represent important predictor variables used model species distribution. can explore grid generated stored sdm_area object using functions mapview_grid() plot_grid(). Note function used plot grids lines.  Now study area, can assign predictor variables . , use add_predictors function, usually use fist two arguments, sdm_area build previous step RasterStack, SpatRaster stars object predictors data. Note add_predictors also gdal argument, works previous one sdm_area function. Predictors variables used train models. training models, need project models scenarios. Currently, don’t scenario sdm_area object. can address predictors data current scenario applying function add_scenario without considering argument. happens argument pred_as_scen standarly set TRUE. aiming project species distributions scenarios, can download data add way current data. current bioclimatic data, already included scen object package, output , masked match study area fewer variables (see ?scen information data). Now can add current future scenarios sdm_area object. meaning parameters see help file ?add_scenarios. adding scenarios, function test variables available scenarios, otherwise filter predictors. Note scen hydrological variables. variables call “stationary” variables, meaning don’t change despite climate change scenarios. , must inform function variables replicated scenarios. common modelers need subset variables inform models. can due statistical artifacts common quarter bioclimatic variables, causation subset, aiming variables causality effect species distribution. user may also want change scenarios names, predictors names retrieve predictors data. myriad functions can found package, help files functions ?add_predictors ?add_scenarios, also ?select_predictors.","code":"rivs #> Simple feature collection with 1031 features and 2 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -54.61834 ymin: -26.28958 xmax: -48.68542 ymax: -22.53484 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    LENGTH_KM DIST_DN_KM                       geometry #> 1       7.31     2189.9 LINESTRING (-53.52234 -22.5... #> 2       4.21     2186.2 LINESTRING (-53.05304 -22.5... #> 3       2.14     2200.3 LINESTRING (-52.92292 -22.5... #> 4       3.45     2186.7 LINESTRING (-53.54792 -22.5... #> 5       1.26     2184.9 LINESTRING (-53.07708 -22.5... #> 6       3.75     2302.6 LINESTRING (-52.14375 -22.5... #> 7       2.12     2202.7 LINESTRING (-52.90625 -22.5... #> 8       2.54     2183.9 LINESTRING (-53.55625 -22.5... #> 9       4.89     2195.6 LINESTRING (-52.94375 -22.5... #> 10     11.24     2320.3 LINESTRING (-51.93542 -22.5... rivs |> select_predictors(LENGTH_KM) |> plot() sa <- sdm_area(rivs,                 cell_size = 25000,                 crs = 6933,                 variables_selected = NULL,                gdal = TRUE,                 crop_by = NULL,                 lines_as_sdm_area = TRUE) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE sa #>           caretSDM          #> ........................... #> Class                     : sdm_area #> Extent                    : -5269921 -3240236 -4697475 -2803134 (xmin, xmax, ymin, ymax) #> CRS                       : EPSG:6933  #> Resolution                : (25000, 25000) (x, y) #> Number of Predictors      : 2  #> Predictors Names          : LENGTH_KM, DIST_DN_KM plot_grid(sa) sa <- add_predictors(sa,                       bioc,                       variables_selected = NULL,                       gdal = TRUE) |> suppressWarnings() #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. sa #>           caretSDM          #> ........................... #> Class                     : sdm_area #> Extent                    : -5269921 -3228134 -4719921 -2803134 (xmin, xmax, ymin, ymax) #> CRS                       : EPSG:6933  #> Resolution                : (25000, 25000) (x, y) #> Number of Predictors      : 5  #> Predictors Names          : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12 add_scenarios(sa) WorldClim_data(path = NULL,                 period = \"future\",                 variable = \"bioc\",                year = \"2090\",                gcm = c(\"ca\", \"mi\"),                ssp = c(\"245\",\"585\"),                resolution = 10)  scen <- read_stars(list.files(\"input_data/WorldClim_data_future/\", full.names = T), along = \"band\", normalize_path = F) scen #> stars object with 3 dimensions and 4 attributes #> attribute(s): #>                 Min. 1st Qu. Median     Mean  3rd Qu.   Max. NA's #> ca_ssp245_2090  18.4  26.100 296.50 570.0926 1188.975 2049.2 1908 #> ca_ssp585_2090  22.2  31.275 293.25 516.0384 1033.150 1862.2 1908 #> mi_ssp245_2090  16.3  23.000 314.65 660.9749 1426.800 2414.8 1908 #> mi_ssp585_2090  17.9  24.500 323.45 702.6153 1534.100 2585.0 1908 #> dimension(s): #>      from  to offset   delta refsys point              values x/y #> x     747 798   -180  0.1667 WGS 84 FALSE                NULL [x] #> y     670 706     90 -0.1667 WGS 84 FALSE                NULL [y] #> band    1   3     NA      NA     NA    NA bio1 , bio4 , bio12 sa <- add_scenarios(sa,                      scen = scen,                      scenarios_names = NULL,                     pred_as_scen = TRUE,                     variables_selected = NULL,                      stationary = c(\"LENGTH_KM\", \"DIST_DN_KM\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. sa #>           caretSDM          #> ........................... #> Class                     : sdm_area #> Extent                    : -5269921 -3228134 -4719921 -2803134 (xmin, xmax, ymin, ymax) #> CRS                       : EPSG:6933  #> Resolution                : (25000, 25000) (x, y) #> Number of Predictors      : 5  #> Predictors Names          : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12  #> Number of Scenarios      : 5  #> Scenarios Names          : ca_ssp245_2090, ca_ssp585_2090, mi_ssp245_2090, mi_ssp585_2090, current"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"defining-the-occurrences-set-in-the-study-area","dir":"Articles","previous_headings":"Pre-Processing","what":"Defining the occurrences set in the study area","title":"Modeling Species Distributions in Continental Water Bodies","text":"caretSDM strong GIS background, necessary explicitly tell CRS data . assure every GIS transformation correct. occurrences_sdm function creates occurrences class (.e. “response variable”, “target” “label”) used occurrences’ transformations functions, pseudoabsences generation. reference, GBIF data crs = 4326, records stored salm object transformed 6933 (see ?salm information data).  next step assigns occurrences study area, excluding records outside study area NAs predictors. sdm_area grid, assign records cell. , line used, unlikely record fall exactly line. solution presented use sf::st_nearest_feature function, address species record closest river line.","code":"oc <- occurrences_sdm(salm, crs = 6933) oc #>         caretSDM        #> ....................... #> Class                 : occurrences #> Species Names         : Salminus brasiliensis  #> Number of presences   : 46  #> ================================ #> Data: #> Simple feature collection with 6 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -5263273 ymin: -3156734 xmax: -5002956 ymax: -2830253 #> Projected CRS: WGS 84 / NSIDC EASE-Grid 2.0 Global #>                 species                  geometry #> 1 Salminus brasiliensis POINT (-5002956 -3034581) #> 2 Salminus brasiliensis POINT (-5123570 -3049429) #> 3 Salminus brasiliensis POINT (-5138591 -2830253) #> 4 Salminus brasiliensis POINT (-5263273 -3143263) #> 5 Salminus brasiliensis POINT (-5172118 -3156734) #> 6 Salminus brasiliensis POINT (-5172118 -3156734) plot_occurrences(oc) oc <- join_area(oc, sa)"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"the-input_sdm-class","dir":"Articles","previous_headings":"Pre-Processing","what":"The input_sdm class","title":"Modeling Species Distributions in Continental Water Bodies","text":"caretSDM use multiple classes perform analysis. Every time perform new analysis, objects keep information . Ideally, workflow one object throughout . input_sdm class key class workflow, every function orbitate. class puts occurrences, predictors, scenarios, models predictions together perform analysis possible two classes available. First, create object informing occurrences sdm_area.","code":"i <- input_sdm(oc, sa) i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Salminus brasiliensis  #> Number of presences           : 46  #> --------  Predictors  --------- #> Number of Predictors          : 5  #> Predictors Names              : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"data-cleaning-routine","dir":"Articles","previous_headings":"Pre-Processing","what":"Data cleaning routine","title":"Modeling Species Distributions in Continental Water Bodies","text":"first step workflow input_sdm object, clean occurrences data applying group functions package CoordinateCleaner. function, also provide way check environmental duplicates, including predictors object. function also checks records sea species terrestrial, note can switched studied species terrestrial. way caretSDM works, can always overwrite main input_sdm object update . function return new object previous information new information obtained data_clean function, note end Data Cleaning information Duplicated Cell method (actually duplicated line). method possible occurrence predictors data.","code":"i <- data_clean(i,                 capitals = TRUE,                 centroids = TRUE,                 duplicated = TRUE,                 identical = TRUE,                 institutions = TRUE,                 invalid = TRUE,                 terrestrial = TRUE) #> Cell_ids identified, removing duplicated cell_id. #> Testing country capitals #> Removed 0 records. #> Testing country centroids #> Removed 0 records. #> Testing duplicates #> Removed 0 records. #> Testing equal lat/lon #> Removed 0 records. #> Testing biodiversity institutions #> Removed 0 records. #> Testing coordinate validity #> Removed 0 records. #> Testing sea coordinates #> Reading layer `ne_110m_land' from data source `/tmp/Rtmp9stEr8/ne_110m_land.shp' using driver `ESRI Shapefile' #> Simple feature collection with 127 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #> Geodetic CRS:  WGS 84 #> Removed 0 records."},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"removing-multicolinearity-from-predictors-data","dir":"Articles","previous_headings":"Pre-Processing","what":"Removing multicolinearity from predictors’ data","title":"Modeling Species Distributions in Continental Water Bodies","text":"two main methods SDM literature consider multicolinearity predictors data. One use PCA-axes, caretSDM performed using pca_predictorsfunction. Variance Inflation Factor (VIF), performed using vif_predictors function. , users able perform variables selection usdm package. function wrapper usdm::vifcor, variables kept given maximum threshold colinearity. standard 0.5. better visualize VIF results, users can run vif_summary functions, self-explanatory.","code":"i <- vif_predictors(i,                      th = 0.5,                      maxobservations = 5000,                      variables_selected = NULL) vif_summary(i) #> 2 variables from the 5 input variables have collinearity problem:  #>   #> bio12 bio4  #>  #> After excluding the collinear variables, the linear correlation coefficients ranges between:  #> min correlation ( DIST_DN_KM ~ LENGTH_KM ):  -0.03408993  #> max correlation ( bio1 ~ DIST_DN_KM ):  -0.2953415  #>  #> ---------- VIFs of the remained variables --------  #>    Variables      VIF #> 1  LENGTH_KM 1.006302 #> 2 DIST_DN_KM 1.095707 #> 3       bio1 1.101186"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"obtaining-pseudoabsence-data","dir":"Articles","previous_headings":"Pre-Processing","what":"Obtaining pseudoabsence data","title":"Modeling Species Distributions in Continental Water Bodies","text":"Pseudoabsence data stored occurrences object (inside input_sdm). generate , must inform parameters. Probably one important arguments function method. Currently, two methods implemented: “random”, takes random grid cells (lines) pseudoabsences; “bioclim” method, creates Surface Range Envelope (SRE) using presence records, binarizes projection SRE using th threshold retrieves pseudoabsences outside envelope. number pseudoabsences created can changed using n_pa parameter. set NULL, n_pa equal number occurrences (avoid imbalance issues). number sets pseudoabsences adjusted n_set parameter function. argument variables_selected inform variables want use build pseudoabsences/models. can either vector variables names previously performed selection method.","code":"i <- pseudoabsences(i,                      method = \"bioclim\",                      n_set = 10,                     n_pa = NULL,                     variables_selected = \"vif\",                     th = 0)  i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Salminus brasiliensis  #> Number of presences           : 22  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 22  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 5  #> Predictors Names              : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12  #> Area (VIF)                    : all #> Threshold                     : 0.5 #> Selected Variables (VIF)      : LENGTH_KM, DIST_DN_KM, bio1  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current"},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"modeling-species-relationship-with-variables","dir":"Articles","previous_headings":"Processing","what":"Modeling species relationship with variables","title":"Modeling Species Distributions in Continental Water Bodies","text":"occurrences predictors data put together, can pass modeling. name suggests, caretSDM uses caret package underlying modeling procedure. familiar, caret easiest way perform Machine Learning analysis R. works setting modeling wrapper pass multiple packages can provide lot automation regarding algorithms fine-tuning, data spliting, pre-processing methods predictions. automated functions caret can altered using ctrl argument train_sdm function. See ?caret::trainControl options available. show use repeated crossvalidation method, defined caret::trainControl. Note , using algorithm first time, caret ask install relevant packages properly run algorithm.","code":"ctrl_sdm <- caret::trainControl(method = \"repeatedcv\",                                  number = 4,                                  repeats = 1,                                  classProbs = TRUE,                                 returnResamp = \"all\",                                  summaryFunction = summary_sdm,                                  savePredictions = \"all\")  i <- train_sdm(i,                 algo = c(\"naive_bayes\", \"kknn\"),                 variables_selected = \"vif\",                 ctrl=ctrl_sdm) |> suppressWarnings() #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Attaching package: 'caret' #> The following object is masked from 'package:caretSDM': #>  #>     predictors i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Salminus brasiliensis  #> Number of presences           : 22  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 22  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 5  #> Predictors Names              : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12  #> Area (VIF)                    : all #> Threshold                     : 0.5 #> Selected Variables (VIF)      : LENGTH_KM, DIST_DN_KM, bio1  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes kknn  #> Variables Names               : LENGTH_KM DIST_DN_KM bio1  #> Model Validation              : #>     Method                    : repeatedcv  #>     Number                    : 4  #>     Metrics                   : #> $`Salminus brasiliensis` #>          algo       ROC       TSS Sensitivity Specificity #> 1        kknn 0.7793611 0.4883333       0.755      0.7425 #> 2 naive_bayes 0.7883889 0.4408333       0.745      0.7142"},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"predicting-species-distribution-in-given-scenarios","dir":"Articles","previous_headings":"Post-Processing","what":"Predicting species distribution in given scenarios","title":"Modeling Species Distributions in Continental Water Bodies","text":"Now models, can make predictions new scenarios. function predict_sdm incorporates also prediction ensembles (ensembles=TRUE standard). function predict models passes given validation threshold. validation metric set using metric th arguments. following example, metric set “ROC” th equal 0.9. means models ROC > 0.9 used predictions ensembles. print, possible see “Methods” “Predictions” section, informs ensemble types made: mean occurrence probability (mean_occ_prob; simple mean GCMs), mean occurrence probability weighted AUC/ROC (wmean_AUC; AUC/ROC values used weights), majority rule, committee average (committee_avg; sum binaries). Besides AUC/ROC metric, users can get every available metric model using following code commit “ROC”: Otherwise, mean validation metric values per algorithm can also obtained following code: building predictions, possible ensemble GCMs using gcms_ensembles function informing parameter gcms part scenarios_names() used ensemble gcms. example, scenarios names : c(\"ca_ssp245_2090\", \"ca_ssp585_2090\", \"mi_ssp245_2090\", \"mi_ssp585_2090\"). Thus, set parameter c(\"ca\", \"mi\") function searches scenarios names \"ca\" \"mi\" remove parts scenarios names. remains, example, : c(\"_ssp245_2090\", \"_ssp585_2090\", \"_ssp245_2090\", \"_ssp585_2090\"). , function ensembles scenarios new names (note , removing gcms abbreviation, remaining name repeats two times). end, ensembles named new names generated last step included object scenarios. Note now section “Predictions” two scenarios called _ssp245_2090 _ssp585_2090, GCM’s ensembles calculated.","code":"i <- predict_sdm(i,                  metric = \"ROC\",                  th = 0.7,                  tp = \"prob\",                  ensembles = TRUE) #> [1] \"Projecting: 1/5\" #> [1] \"Projecting: 2/5\" #> [1] \"Projecting: 3/5\" #> [1] \"Projecting: 4/5\" #> [1] \"Projecting: 5/5\" #> [1] \"Ensembling...\" #> [1] \"ca_ssp245_2090\" #> [1] \"Salminus brasiliensis\" #> [1] \"ca_ssp585_2090\" #> [1] \"Salminus brasiliensis\" #> [1] \"mi_ssp245_2090\" #> [1] \"Salminus brasiliensis\" #> [1] \"mi_ssp585_2090\" #> [1] \"Salminus brasiliensis\" #> [1] \"current\" #> [1] \"Salminus brasiliensis\" i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Salminus brasiliensis  #> Number of presences           : 22  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 22  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 5  #> Predictors Names              : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12  #> Area (VIF)                    : all #> Threshold                     : 0.5 #> Selected Variables (VIF)      : LENGTH_KM, DIST_DN_KM, bio1  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes kknn  #> Variables Names               : LENGTH_KM DIST_DN_KM bio1  #> Model Validation              : #>     Method                    : repeatedcv  #>     Number                    : 4  #>     Metrics                   : #> $`Salminus brasiliensis` #>          algo       ROC       TSS Sensitivity Specificity #> 1        kknn 0.7793611 0.4883333       0.755      0.7425 #> 2 naive_bayes 0.7883889 0.4408333       0.745      0.7142 #>  #> --------  Predictions  -------- #> Ensembles                     : #>     Scenarios                 : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #>     Methods                   : mean_occ_prob wmean_AUC committee_avg  #> Thresholds                    : #>     Method                    : threshold  #>     Criteria                  : 0.7 get_validation_metrics(i) #> $`Salminus brasiliensis` #>              algo       ROC       TSS Sensitivity Specificity Pos Pred Value #> m1.2         kknn 0.7963889 0.5833333     0.86650     0.71650        0.76525 #> m2.2         kknn 0.7225000 0.2916667     0.68325     0.60850        0.63625 #> m3.2         kknn 0.7616667 0.3500000     0.66675     0.68325        0.69650 #> m4.2         kknn 0.9250000 0.7666667     0.90825     0.85825        0.88750 #> m5.2         kknn 0.7225000 0.3500000     0.69175     0.70000        0.70825 #> m6.2         kknn 0.7584722 0.5666667     0.77500     0.79175        0.83350 #> m7.2         kknn 0.7933333 0.5166667     0.69175     0.82500        0.81250 #> m8.2         kknn 0.7305556 0.5500000     0.86675     0.68325        0.78175 #> m9.2         kknn 0.8325000 0.4416667     0.71675     0.77500        0.78750 #> m10.2        kknn 0.7506944 0.4666667     0.68325     0.78350        0.77375 #> m1.1  naive_bayes 0.8022222 0.5250000     0.80825     0.71675        0.75875 #> m2.1  naive_bayes 0.8466667 0.5000000     0.78325     0.77500        0.74150 #> m3.1  naive_bayes 0.7086111 0.4000000     0.67500     0.72500        0.71250 #> m4.1  naive_bayes 0.9083333 0.6000000     0.82500     0.77500        0.77675 #> m5.1  naive_bayes 0.7591667 0.3750000     0.73350     0.64175        0.67625 #> m6.1  naive_bayes 0.7925000 0.4583333     0.81675     0.69175        0.70100 #> m7.1  naive_bayes 0.7469444 0.3166667     0.63325     0.68350        0.66350 #> m8.1  naive_bayes 0.7750000 0.4583333     0.72500     0.73325        0.73850 #> m9.1  naive_bayes 0.7300000 0.2750000     0.67500     0.67500        0.65000 #> m10.1 naive_bayes 0.8144444 0.5000000     0.77500     0.72500        0.74175 #>       Neg Pred Value Precision  Recall      F1 Prevalence Detection Rate #> m1.2         0.85400   0.76525 0.86650 0.80875        0.5        0.43400 #> m2.2         0.76775   0.63625 0.68325 0.62875        0.5        0.34175 #> m3.2         0.68750   0.69650 0.66675 0.66675        0.5        0.33775 #> m4.2         0.91650   0.88750 0.90825 0.89150        0.5        0.45475 #> m5.2         0.68125   0.70825 0.69175 0.67275        0.5        0.34475 #> m6.2         0.81450   0.83350 0.77500 0.77075        0.5        0.38425 #> m7.2         0.73975   0.81250 0.69175 0.72750        0.5        0.34025 #> m8.2         0.85425   0.78175 0.86675 0.79525        0.5        0.43325 #> m9.2         0.75150   0.78750 0.71675 0.69125        0.5        0.35825 #> m10.2        0.74900   0.77375 0.68325 0.69225        0.5        0.33625 #> m1.1         0.78350   0.75875 0.80825 0.77575        0.5        0.40425 #> m2.1         0.78025   0.74150 0.78325 0.73850        0.5        0.39225 #> m3.1         0.72025   0.71250 0.67500 0.68400        0.5        0.33650 #> m4.1         0.85100   0.77675 0.82500 0.78975        0.5        0.40925 #> m5.1         0.70850   0.67625 0.73350 0.69700        0.5        0.36525 #> m6.1         0.80425   0.70100 0.81675 0.74775        0.5        0.41050 #> m7.1         0.68450   0.66350 0.63325 0.63600        0.5        0.31350 #> m8.1         0.73275   0.73850 0.72500 0.72350        0.5        0.36400 #> m9.1         0.62500   0.65000 0.67500 0.65525        0.5        0.34025 #> m10.1        0.76600   0.74175 0.77500 0.75350        0.5        0.38800 #>       Detection Prevalence Balanced Accuracy Accuracy   Kappa AccuracyLower #> m1.2               0.57275           0.79175  0.79450 0.58525       0.45800 #> m2.2               0.53750           0.64575  0.64575 0.29175       0.32625 #> m3.2               0.50125           0.67500  0.67425 0.35400       0.36425 #> m4.2               0.54550           0.88350  0.88625 0.76850       0.56650 #> m5.2               0.52300           0.67500  0.66625 0.34450       0.34725 #> m6.2               0.49200           0.78325  0.77600 0.55875       0.44075 #> m7.2               0.42950           0.75850  0.75075 0.50725       0.41850 #> m8.2               0.59900           0.77500  0.76725 0.54475       0.45025 #> m9.2               0.51675           0.72075  0.72075 0.44175       0.38850 #> m10.2              0.44800           0.73325  0.72375 0.45525       0.39050 #> m1.1               0.54575           0.76250  0.76250 0.52500       0.44325 #> m2.1               0.54950           0.75000  0.75325 0.50025       0.42475 #> m3.1               0.53500           0.70000  0.70125 0.40150       0.37200 #> m4.1               0.54550           0.80000  0.79525 0.59575       0.46800 #> m5.1               0.55200           0.68750  0.68250 0.37050       0.34875 #> m6.1               0.59075           0.72925  0.73025 0.46100       0.39575 #> m7.1               0.47500           0.65825  0.65125 0.31175       0.32975 #> m8.1               0.50000           0.72925  0.72700 0.45575       0.39250 #> m9.1               0.54775           0.63775  0.63425 0.27200       0.32250 #> m10.1              0.52675           0.75000  0.74875 0.49800       0.41200 #>       AccuracyUpper AccuracyNull AccuracyPValue McnemarPValue Positive Negative #> m1.2        0.96775       0.5225        0.07950     0.8700000      5.5      5.5 #> m2.2        0.87800       0.5000        0.34700     0.5935000      5.5      5.5 #> m3.2        0.88900       0.5225        0.41200     0.7907500      5.5      5.5 #> m4.2        0.98800       0.5450        0.07950     0.8700000      5.5      5.5 #> m5.2        0.88775       0.5225        0.34975     0.8120000      5.5      5.5 #> m6.2        0.95550       0.5225        0.11250     0.6240000      5.5      5.5 #> m7.2        0.94300       0.5225        0.14050     0.8120000      5.5      5.5 #> m8.2        0.93700       0.5225        0.30250     0.6535000      5.5      5.5 #> m9.2        0.93375       0.5000        0.17375     0.6820000      5.5      5.5 #> m10.2       0.93500       0.5225        0.17350     0.5862500      5.5      5.5 #> m1.1        0.93900       0.5000        0.24725     0.8723333      5.5      5.5 #> m2.1        0.93800       0.5225        0.21100     1.0000000      5.5      5.5 #> m3.1        0.92125       0.5225        0.36275     0.8700000      5.5      5.5 #> m4.1        0.95675       0.5450        0.16050     0.9042500      5.5      5.5 #> m5.1        0.91625       0.5225        0.36200     0.9042500      5.5      5.5 #> m6.1        0.93600       0.5225        0.22200     1.0000000      5.5      5.5 #> m7.1        0.89350       0.5225        0.35300     0.8085000      5.5      5.5 #> m8.1        0.93700       0.5450        0.61125     0.9042500      5.5      5.5 #> m9.1        0.88225       0.5225        0.41200     0.9207500      5.5      5.5 #> m10.1       0.94875       0.5225        0.20325     1.0000000      5.5      5.5 #>       True Positive False Positive True Negative False Negative      ROCSD #> m1.2           4.75           0.75          4.00           1.50 0.07116534 #> m2.2           3.75           1.75          3.25           2.25 0.20006249 #> m3.2           3.75           2.25          3.75           1.75 0.23779076 #> m4.2           5.00           0.75          4.75           1.25 0.08164966 #> m5.2           3.75           2.00          3.75           2.00 0.21439622 #> m6.2           4.25           1.25          4.25           1.25 0.04544108 #> m7.2           3.75           1.75          4.50           1.00 0.16775202 #> m8.2           4.75           1.50          3.75           2.00 0.26016377 #> m9.2           4.00           1.75          4.25           1.75 0.08258974 #> m10.2          3.75           1.75          4.25           1.25 0.10687227 #> m1.1           4.50           1.50          4.00           1.50 0.20516780 #> m2.1           4.25           1.50          4.25           1.75 0.13210546 #> m3.1           3.75           1.75          4.00           2.25 0.19277137 #> m4.1           4.50           1.00          4.25           1.50 0.11344765 #> m5.1           4.00           1.75          3.50           2.25 0.05862625 #> m6.1           4.50           1.50          3.75           2.00 0.13881776 #> m7.1           3.50           2.00          3.75           1.75 0.16109291 #> m8.1           4.00           2.50          4.00           2.50 0.14240006 #> m9.1           3.75           2.25          3.75           2.25 0.23427390 #> m10.1          4.25           1.50          4.00           1.75 0.10655086 #>           TSSSD SensitivitySD SpecificitySD Pos Pred ValueSD Neg Pred ValueSD #> m1.2  0.1036375    0.09034932     0.1345226       0.06069253       0.10490313 #> m2.2  0.3500000    0.36677275     0.3009369       0.14893707       0.26974108 #> m3.2  0.4467993    0.30009262     0.2849367       0.27570576       0.23935678 #> m4.2  0.1865873    0.10679693     0.1893117       0.14155888       0.09641749 #> m5.2  0.3919325    0.26300618     0.2987288       0.26728636       0.21925537 #> m6.2  0.1563472    0.20615528     0.2499445       0.19225764       0.15370209 #> m7.2  0.2219443    0.21665391     0.1369647       0.14218884       0.17462603 #> m8.2  0.3584948    0.18045221     0.3667727       0.25208778       0.20830006 #> m9.2  0.1950783    0.25163913     0.2808124       0.18580366       0.18347638 #> m10.2 0.1943651    0.28081236     0.1573626       0.15245190       0.19378854 #> m1.1  0.4163332    0.22173558     0.2629428       0.20830006       0.21347814 #> m2.1  0.3138766    0.25578507     0.1423807       0.16174981       0.17937925 #> m3.1  0.2788867    0.27537853     0.1772162       0.08350000       0.26231708 #> m4.1  0.2596294    0.23629078     0.1562762       0.09885680       0.20423087 #> m5.1  0.2125681    0.24494897     0.1964502       0.11368377       0.20359334 #> m6.1  0.2349153    0.13731563     0.1423807       0.13456845       0.14155888 #> m7.1  0.2740303    0.26299556     0.1597568       0.15438156       0.22118544 #> m8.1  0.1551582    0.25878997     0.2250104       0.11676329       0.11342068 #> m9.1  0.4112988    0.18544249     0.3031930       0.25437898       0.15945532 #> m10.1 0.1031899    0.07678759     0.1099667       0.08735893       0.08499412 #>       PrecisionSD   RecallSD       F1SD PrevalenceSD Detection RateSD #> m1.2   0.06069253 0.09034932 0.03072865   0.03674235       0.05769460 #> m2.2   0.14893707 0.36677275 0.22613473   0.00000000       0.18322732 #> m3.2   0.27570576 0.30009262 0.23154751   0.03674235       0.17164571 #> m4.2   0.14155888 0.10679693 0.08493331   0.05196152       0.08669102 #> m5.2   0.26728636 0.26300618 0.20902532   0.03674235       0.13392286 #> m6.2   0.19225764 0.20615528 0.09577186   0.03674235       0.09386648 #> m7.2   0.14218884 0.21665391 0.12100000   0.03674235       0.08033835 #> m8.2   0.25208778 0.18045221 0.14719007   0.03674235       0.08966001 #> m9.2   0.18580366 0.25163913 0.13103784   0.00000000       0.12585276 #> m10.2  0.15245190 0.28081236 0.14525696   0.03674235       0.11998160 #> m1.1   0.20830006 0.22173558 0.20286120   0.00000000       0.11086779 #> m2.1   0.16174981 0.25578507 0.20366864   0.03674235       0.14237626 #> m3.1   0.08350000 0.27537853 0.15502339   0.03674235       0.12927071 #> m4.1   0.09885680 0.23629078 0.15483190   0.05196152       0.11709362 #> m5.1   0.11368377 0.24494897 0.12678952   0.03674235       0.11340598 #> m6.1   0.13456845 0.13731563 0.12157028   0.03674235       0.09375322 #> m7.1   0.15438156 0.26299556 0.17110888   0.03674235       0.13029326 #> m8.1   0.11676329 0.25878997 0.16907001   0.05196152       0.12869343 #> m9.1   0.25437898 0.18544249 0.18328916   0.03674235       0.11605566 #> m10.1  0.08735893 0.07678759 0.05300000   0.03674235       0.05238957 #>       Detection PrevalenceSD Balanced AccuracySD AccuracySD    KappaSD #> m1.2              0.11452911          0.05162283 0.04697872 0.09998125 #> m2.2              0.28644546          0.17503976 0.17503976 0.34996035 #> m3.2              0.22464843          0.22321738 0.23003098 0.45108979 #> m4.2              0.13600000          0.09325413 0.08712587 0.17922146 #> m5.2              0.16812495          0.19601594 0.19138682 0.38882419 #> m6.2              0.20477467          0.07824481 0.08337466 0.16171039 #> m7.2              0.12065516          0.11103903 0.10831551 0.21652925 #> m8.2              0.22183252          0.17914426 0.18591642 0.36296132 #> m9.2              0.25707765          0.09741107 0.09741107 0.19520651 #> m10.2             0.18805850          0.09706827 0.09109839 0.18582317 #> m1.1              0.12717016          0.20813998 0.20813998 0.41635992 #> m2.1              0.10960687          0.15713900 0.15177478 0.31321598 #> m3.1              0.18407426          0.13936373 0.13576696 0.27707445 #> m4.1              0.16559489          0.12997179 0.13650000 0.26464111 #> m5.1              0.18805850          0.10626696 0.11237734 0.21420706 #> m6.1              0.11117966          0.11774938 0.11742622 0.23462363 #> m7.1              0.13559867          0.13688681 0.13708240 0.27430761 #> m8.1              0.22854813          0.07744837 0.07430119 0.15446979 #> m9.1              0.14564426          0.20572372 0.20551135 0.40479542 #> m10.1             0.07762463          0.05168494 0.05048680 0.10165464 #>       AccuracyLowerSD AccuracyUpperSD AccuracyNullSD AccuracyPValueSD #> m1.2       0.05403702      0.01857193     0.02598076       0.07144928 #> m2.2       0.15509433      0.08752523     0.00000000       0.24909971 #> m3.2       0.21830464      0.11674188     0.02598076       0.41446783 #> m4.2       0.11068424      0.02412468     0.00000000       0.07261543 #> m5.2       0.16574353      0.10176566     0.02598076       0.34794767 #> m6.2       0.07824481      0.02776689     0.02598076       0.08525061 #> m7.2       0.11402485      0.04040627     0.02598076       0.08547319 #> m8.2       0.20823764      0.07155126     0.02598076       0.26088248 #> m9.2       0.10871829      0.04196328     0.00000000       0.15777912 #> m10.2      0.09361446      0.04138438     0.02598076       0.14635459 #> m1.1       0.23295833      0.07768902     0.00000000       0.26509039 #> m2.1       0.13740300      0.07320291     0.02598076       0.28758941 #> m3.1       0.11981201      0.08327615     0.02598076       0.32849188 #> m4.1       0.14142843      0.05166156     0.00000000       0.17686435 #> m5.1       0.09072440      0.06376193     0.02598076       0.23272588 #> m6.1       0.10045355      0.06394985     0.02598076       0.18938849 #> m7.1       0.13664156      0.06783067     0.02598076       0.24933512 #> m8.1       0.07109383      0.05109713     0.00000000       0.17712966 #> m9.1       0.19425327      0.10232139     0.02598076       0.37241643 #> m10.1      0.05696783      0.02466272     0.02598076       0.13087494 #>       McnemarPValueSD PositiveSD NegativeSD True PositiveSD False PositiveSD #> m1.2        0.2600000  0.5773503  0.5773503       0.5000000        0.5000000 #> m2.2        0.3845712  0.5773503  0.5773503       2.0615528        2.0615528 #> m3.2        0.4084820  0.5773503  0.5773503       1.8929694        1.7078251 #> m4.2        0.3002221  0.5773503  0.5773503       0.9574271        0.5773503 #> m5.2        0.3760000  0.5773503  0.5773503       1.2909944        1.4142136 #> m6.2        0.4341674  0.5773503  0.5773503       1.2583057        1.2583057 #> m7.2        0.3760000  0.5773503  0.5773503       0.9574271        1.2583057 #> m8.2        0.4243061  0.5773503  0.5773503       0.9574271        1.0000000 #> m9.2        0.3792132  0.5773503  0.5773503       1.7078251        1.2909944 #> m10.2       0.3150856  0.5773503  0.5773503       1.5000000        1.5000000 #> m1.1        0.2211252  0.5773503  0.5773503       1.4142136        1.2909944 #> m2.1        0.1915000  0.5773503  0.5773503       1.4142136        1.2909944 #> m3.1        0.3606183  0.5773503  0.5773503       1.7078251        1.5000000 #> m4.1        0.3606183  0.5773503  0.5773503       1.2909944        1.4142136 #> m5.1        0.2744534  0.5773503  0.5773503       0.9574271        1.5000000 #> m6.1        0.2666063  0.5773503  0.5773503       1.0000000        0.8164966 #> m7.1        0.2666063  0.5773503  0.5773503       1.7320508        1.4142136 #> m8.1        0.3631533  0.5773503  0.5773503       1.4142136        1.2909944 #> m9.1        0.1915000  0.5773503  0.5773503       1.2583057        0.9574271 #> m10.1       0.0000000  0.5773503  0.5773503       0.5000000        0.5773503 #>       True NegativeSD False NegativeSD #> m1.2        1.1547005        0.5773503 #> m2.2        1.5000000        1.8929694 #> m3.2        1.7078251        1.7078251 #> m4.2        1.2583057        0.9574271 #> m5.2        1.2909944        1.8257419 #> m6.2        0.9574271        1.5000000 #> m7.2        0.5773503        0.8164966 #> m8.2        2.0615528        2.0615528 #> m9.2        1.5000000        1.5000000 #> m10.2       0.5000000        0.9574271 #> m1.1        1.8257419        1.2909944 #> m2.1        0.5000000        0.9574271 #> m3.1        0.9574271        0.9574271 #> m4.1        0.8164966        1.0000000 #> m5.1        0.9574271        1.2583057 #> m6.1        0.5773503        0.9574271 #> m7.1        0.9574271        0.9574271 #> m8.1        1.4142136        1.2909944 #> m9.1        1.5000000        1.7078251 #> m10.1       0.9574271        0.5773503 mean_validation_metrics(i) #> $`Salminus brasiliensis` #> # A tibble: 2 × 53 #>   algo       ROC   TSS Sensitivity Specificity `Pos Pred Value` `Neg Pred Value` #>   <chr>    <dbl> <dbl>       <dbl>       <dbl>            <dbl>            <dbl> #> 1 kknn     0.779 0.488       0.755       0.742            0.768            0.782 #> 2 naive_b… 0.788 0.441       0.745       0.714            0.716            0.746 #> # ℹ 46 more variables: Precision <dbl>, Recall <dbl>, F1 <dbl>, #> #   Prevalence <dbl>, `Detection Rate` <dbl>, `Detection Prevalence` <dbl>, #> #   `Balanced Accuracy` <dbl>, Accuracy <dbl>, Kappa <dbl>, #> #   AccuracyLower <dbl>, AccuracyUpper <dbl>, AccuracyNull <dbl>, #> #   AccuracyPValue <dbl>, McnemarPValue <dbl>, Positive <dbl>, Negative <dbl>, #> #   `True Positive` <dbl>, `False Positive` <dbl>, `True Negative` <dbl>, #> #   `False Negative` <dbl>, ROCSD <dbl>, TSSSD <dbl>, SensitivitySD <dbl>, … i <- gcms_ensembles(i, gcms = c(\"ca\", \"mi\")) #> New names: #> New names: #> • `cell_id` -> `cell_id...1` #> • `mean_occ_prob` -> `mean_occ_prob...2` #> • `wmean_AUC` -> `wmean_AUC...3` #> • `committee_avg` -> `committee_avg...4` #> • `cell_id` -> `cell_id...5` #> • `mean_occ_prob` -> `mean_occ_prob...6` #> • `wmean_AUC` -> `wmean_AUC...7` #> • `committee_avg` -> `committee_avg...8` i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Salminus brasiliensis  #> Number of presences           : 22  #> Pseudoabsence methods         : #>     Method to obtain PAs      : bioclim  #>     Number of PA sets         : 10  #>     Number of PAs in each set : 22  #> Data Cleaning                 : NAs, Capitals, Centroids, Geographically Duplicated, Identical Lat/Long, Institutions, Invalid, Non-terrestrial, Duplicated Cell (grid)  #> --------  Predictors  --------- #> Number of Predictors          : 5  #> Predictors Names              : LENGTH_KM, DIST_DN_KM, bio1, bio4, bio12  #> Area (VIF)                    : all #> Threshold                     : 0.5 #> Selected Variables (VIF)      : LENGTH_KM, DIST_DN_KM, bio1  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes kknn  #> Variables Names               : LENGTH_KM DIST_DN_KM bio1  #> Model Validation              : #>     Method                    : repeatedcv  #>     Number                    : 4  #>     Metrics                   : #> $`Salminus brasiliensis` #>          algo       ROC       TSS Sensitivity Specificity #> 1        kknn 0.7793611 0.4883333       0.755      0.7425 #> 2 naive_bayes 0.7883889 0.4408333       0.745      0.7142 #>  #> --------  Predictions  -------- #> Ensembles                     : #>     Scenarios                 : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current _ssp245_2090 _ssp585_2090  #>     Methods                   : mean_occ_prob wmean_AUC committee_avg  #> Thresholds                    : #>     Method                    : threshold  #>     Criteria                  : 0.7"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"plotting-results","dir":"Articles","previous_headings":"Post-Processing","what":"Plotting results","title":"Modeling Species Distributions in Continental Water Bodies","text":"plot results, prepared plot mapview functions. present plot versions due mapview limitations markdown, encourage users use mapview alternatives every time possible. , simply alternate “plot” portion functions “mapview”. example, plot_occurrences counterpart function mapview_occurrences set arguments functioning. plot_predictions, can set parameters control plotted. Probably important parameter scenario, user can change plot every different scenario projected. modeling one species can inform correct species plotted using spp_name parameter wealling debate separate projections can plot informing model id (see row names get_validation_metrics retrieve models ids).   Another plot widely used SDM studies Partial Dependence Plot, informs response curves variable. caretSDM plots can plotted using pdp_sdm function.","code":"plot_predictions(i,                  spp_name = NULL,                  scenario = \"current\",                  id = NULL,                  ensemble = TRUE,                  ensemble_type = \"mean_occ_prob\") plot_predictions(i,                  spp_name = NULL,                  scenario = \"_ssp245_2090\",                  id = NULL,                  ensemble = TRUE,                  ensemble_type = \"mean_occ_prob\") pdp_sdm(i) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"writting-results","dir":"Articles","previous_headings":"Post-Processing","what":"Writting results","title":"Modeling Species Distributions in Continental Water Bodies","text":"export caretSDM objects outputs R can use write functions. possibilities see help file ?write_ensembles. encourage users use standard path configuration, organizes outputs straightforward fashion. Common functions following:","code":"write_occurrences(i, path = \"results/occurrences.csv\", grid = FALSE) write_pseudoabsences(i, path = \"results/pseudoabsences\", ext = \".csv\", centroid = FALSE) write_grid(i, path = \"results/grid_study_area.gpkg\", centroid = FALSE) write_ensembles(i, path = \"results/ensembles\", ext = \".tif\")"},{"path":"https://luizesser.github.io/caretSDM/articles/Salminus.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Modeling Species Distributions in Continental Water Bodies","text":"vignette demonstrates build Species Distribution Models lines predictor variables using caretSDM. vignette aimed continental aquatic environments highlights use package using line simplefeature sdm_area. Alternative can seen vignettes(“Araucaria”, “caretSDM”) build SDMs tree species using grid simplefeatures instead lines.","code":"end_time <- Sys.time() end_time - start_time #> Time difference of 2.118367 mins"},{"path":"https://luizesser.github.io/caretSDM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dayani Bailly. Author. Edivando Couto. Author. José Hilário Delconte Ferreira. Author. Reginaldo Ré. Author. Valéria Batista. Author. Luíz Fernando Esser. Author, maintainer, copyright holder.","code":""},{"path":"https://luizesser.github.io/caretSDM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bailly D, Couto E, Hilário Delconte Ferreira J, Ré R, Batista V, Esser L (2025). caretSDM: Build Species Distribution Modeling using 'caret'. R package version 1.1.0.1, https://luizesser.github.io/caretSDM/.","code":"@Manual{,   title = {caretSDM: Build Species Distribution Modeling using 'caret'},   author = {Dayani Bailly and Edivando Couto and José {Hilário Delconte Ferreira} and Reginaldo Ré and Valéria Batista and Luíz Fernando Esser},   year = {2025},   note = {R package version 1.1.0.1},   url = {https://luizesser.github.io/caretSDM/}, }"},{"path":"https://luizesser.github.io/caretSDM/index.html","id":"caretsdm","dir":"","previous_headings":"","what":"Build Species Distribution Modeling using caret","title":"Build Species Distribution Modeling using caret","text":"Luíz Fernando Esser","code":""},{"path":"https://luizesser.github.io/caretSDM/index.html","id":"caretsdm-","dir":"","previous_headings":"","what":"caretSDM","title":"Build Species Distribution Modeling using caret","text":"caretSDM development R package uses powerful caret package main engine obtain Species Distribution Models. caret packaged turned build machine learning models, caretSDM strong focus approach.","code":""},{"path":"https://luizesser.github.io/caretSDM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Build Species Distribution Modeling using caret","text":"can install development version caretSDM GitHub : package also available CRAN. Users able install using following code:","code":"install.packages(\"devtools\") devtools::install_github(\"luizesser/caretSDM\") install.packages(\"caretSDM\")"},{"path":"https://luizesser.github.io/caretSDM/index.html","id":"you-need-help","dir":"","previous_headings":"","what":"You need help?","title":"Build Species Distribution Modeling using caret","text":"caretSDM vastly documented included objects can guide data management. data code seem wrong, try take look objects articles website: Objects bioc Bioclimatic variables current scenario stars class. rivs Hydrological variables current scenario sf class. occ Araucaria angustifolia occurrence data dataframe. salm Salminus brasiliensis occurrence data dataframe. parana Shapefile use sdm_area Simple Feature class. scen Bioclimatic variables future scenarios stars class. algorithms Dataframe characteristics every algorithm available caretSDM. Articles caretSDM Workflow Species Distribution Modeling main vignette terrestrial species modeling, model tree species Araucaria angustifolia. Modeling Species Distributions Continental Water Bodies main vignette continental aquatic species modeling, model fish species Salminus brasiliensis. Concatenate functions caretSDM shows build compact scripts, useful run first tests. Adding New Algorithms caretSDM found ideal algorithm already implemented? show implement custom algorithm package.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Species data from GBIF — GBIF_data","title":"Retrieve Species data from GBIF — GBIF_data","text":"function wrapper get records GBIF using rgbif return data.frame ready used caretSDM.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Species data from GBIF — GBIF_data","text":"","code":"GBIF_data(s, file = NULL, as_df = FALSE, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Species data from GBIF — GBIF_data","text":"s character vector species names. file character file save output. informed, data saved folder. as_df output dataframe? Default FALSE, returning occurrences object. ... Arguments pass rgbif::occ_data().","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Species data from GBIF — GBIF_data","text":"data.frame species occurrences data, occurrences object as_df = FALSE.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Species data from GBIF — GBIF_data","text":"https://www.gbif.org","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Species data from GBIF — GBIF_data","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/GBIF_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Species data from GBIF — GBIF_data","text":"","code":"# \\donttest{ # Select species names: s <- c(\"Araucaria angustifolia\", \"Salminus brasiliensis\")  # Run function: oc <- GBIF_data(s) # }"},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"function allows download data WorldClim v.2.1 (https://www.worldclim.org/data/index.html) considering multiple GCMs, time periods SSPs.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"","code":"WorldClim_data(path = NULL,                period = \"current\",                variable = \"bioc\",                year = \"2090\",                gcm = \"mi\",                ssp = \"585\",                resolution = 10)"},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"path Directory path save downloads. period Can \"current\" \"future\". variable Allows specify variables want retrieve Possible entries : \"tmax\",\"tmin\",\"prec\" /\"bioc\". year Specify year want retrieve data. Possible entries : \"2030\", \"2050\", \"2070\" /\"2090\". can  use vector provide one entry. gcm GCMs considered future scenarios. can use vector provide one entry. ssp SSPs future data. Possible entries : \"126\", \"245\", \"370\" /\"585\". can use vector provide one entry. resolution can select one resolution following alternatives: 10, 5, 2.5 30.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"data downloaded, function downloads data return value. data downloaded, imports data stack.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"function create folder entitled \"input_data/WorldClim_data_current\" \"input_data/WorldClim_data_future\". data downloaded stored folder. Note , despite possible retrieve lot data , recommended , since data heavy.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"https://www.worldclim.org/data/index.html","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/WorldClim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download WorldClim v.2.1 bioclimatic data — WorldClim_data","text":"","code":"# \\donttest{ # download data from multiple periods: year <- c(\"2050\", \"2090\") WorldClim_data(period = \"future\",                variable = \"bioc\",                year = year,                gcm = \"mi\",                ssp = \"126\",                resolution = 10) #> [1] \"mi_ssp126_10_2050\" #> [1] \"mi_ssp126_10_2090\" #> list()  # download data from one specific period WorldClim_data(period = \"future\",                variable = \"bioc\",                year = \"2070\",                gcm = \"mi\",                ssp = \"585\",                resolution = 10) #> [1] \"mi_ssp585_10_2070\" #> list() # }"},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add predictors to sdm_area — add_predictors","title":"Add predictors to sdm_area — add_predictors","text":"function includes new predictors sdm_area object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add predictors to sdm_area — add_predictors","text":"","code":"add_predictors(sa, pred, variables_selected = NULL, gdal = TRUE)  get_predictors(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add predictors to sdm_area — add_predictors","text":"sa sdm_area object. pred RasterStack, SpatRaster, stars sf object predictors data. variables_selected character vector variables names pred used predictors. NULL adds variables. gdal Boolean. Force use GDAL available. See details. input_sdm sdm_area object retrieve data .","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add predictors to sdm_area — add_predictors","text":"add_predictors input sdm_area object returned including pred data binded previous grid. get_predictors retrieves grid object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add predictors to sdm_area — add_predictors","text":"add_predictors returns sdm_area object grid built upon x parameter. two ways make grid resample variables sdm_area: without gdal. standard, gdal available machine used (gdal = TRUE), otherwise sf/stars used.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add predictors to sdm_area — add_predictors","text":"Luíz Fernando Esser (luizesser@gmail.com) Reginaldo Ré. https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add predictors to sdm_area — add_predictors","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 25000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Retrieve predictors data: get_predictors(sa) #> Simple feature collection with 367 features and 8 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -5276744 ymin: -3295037 xmax: -4626744 ymax: -2795037 #> Projected CRS: WGS 84 / NSIDC EASE-Grid 2.0 Global #> First 10 features: #>    cell_id GID0 CODIGOIB1 NOMEUF2 SIGLAUF3     bio1 bio4    bio12 #> 1        6   19        41       0        0 22.45938 1285 261.4752 #> 2        7   19        41       0        0 22.39415 1243 258.4977 #> 3        8   19        41       0        0 22.25541 1220 258.4987 #> 4        9   19        41       0        0 22.19232 1203 259.3725 #> 5       10   19        41       0        0 22.12438 1189 257.6924 #> 6       11   19        41       0        0 22.38992 1192 257.7096 #> 7       12   19        41       0        0 22.40336 1234 254.7985 #> 8       13   19        41       0        0 22.39525 1247 255.8951 #> 9       14   19        41       0        0 22.18080 1288 259.5389 #> 10      31   19        41       0        0 22.20547 1317 267.3304 #>                          geometry #> 1  POLYGON ((-5151744 -2795037... #> 2  POLYGON ((-5126744 -2795037... #> 3  POLYGON ((-5101744 -2795037... #> 4  POLYGON ((-5076744 -2795037... #> 5  POLYGON ((-5051744 -2795037... #> 6  POLYGON ((-5026744 -2795037... #> 7  POLYGON ((-5001744 -2795037... #> 8  POLYGON ((-4976744 -2795037... #> 9  POLYGON ((-4951744 -2795037... #> 10 POLYGON ((-5176744 -2820037..."},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Add scenarios to sdm_area — add_scenarios","title":"Add scenarios to sdm_area — add_scenarios","text":"function includes scenarios sdm_area object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add scenarios to sdm_area — add_scenarios","text":"","code":"add_scenarios(sa, scen = NULL, scenarios_names = NULL, pred_as_scen = TRUE,                      variables_selected = NULL, stationary = NULL)  set_scenarios_names(i, scenarios_names = NULL)  scenarios_names(i)  get_scenarios_data(i)  select_scenarios(i, scenarios_names = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add scenarios to sdm_area — add_scenarios","text":"sa sdm_area input_sdm object. scen RasterStack, SpatRaster stars object. NULL adds predictors scenario. scenarios_names Character vector names scenarios. pred_as_scen Logical. TRUE adds current predictors scenario. variables_selected Character vector variables names scen used variables. NULL adds variables. stationary Names variables sa used scenarios stationary variables. sdm_area input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add scenarios to sdm_area — add_scenarios","text":"add_scenarios returns input sdm_area input_sdm object new slot called scenarios scen data list, slot list holds scenario scenario sf object. set_scenarios_names sets new names scenarios sdm_area/input_sdm object. scenarios_names returns scenarios' names. get_scenarios_data retrieves scenarios data list sf objects. select_scenarios selects scenarios sdm_area/input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add scenarios to sdm_area — add_scenarios","text":"function add_scenarios adds scenarios sdm_area input_sdm object. scen variables present predictors function use variables present objects. stationary variables change scenarios. useful hidrological variables fish habitat modeling, example (see examples ). adding multiple scenarios multiple runs, function always add new \"current\" scenario. avoid , set pred_as_scen = FALSE.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add scenarios to sdm_area — add_scenarios","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/add_scenarios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add scenarios to sdm_area — add_scenarios","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa, scen[1:2]) |> select_predictors(c(\"bio1\", \"bio12\")) #> Warning: Some variables in `variables_selected` are not present in `scen`. #> ℹ Using only variables present in `scen`: bio1, bio4, and bio12  # Set scenarios names: sa <- set_scenarios_names(sa, scenarios_names = c(\"future_1\", \"future_2\",                                                   \"current\")) scenarios_names(sa) #> [1] \"future_1\" \"future_2\" \"current\"   # Get scenarios data: scenarios_grid <- get_scenarios_data(sa) scenarios_grid #> $future_1 #> Simple feature collection with 26 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -5301744 ymin: -3295037 xmax: -4701744 ymax: -2795037 #> Projected CRS: WGS 84 / NSIDC EASE-Grid 2.0 Global #> First 10 features: #>    cell_id     bio1    bio12                       geometry #> 1        2 27.18000 1133.393 POLYGON ((-5201744 -2795037... #> 2        3 26.32000 1094.763 POLYGON ((-5101744 -2795037... #> 3        4 26.48667 1176.187 POLYGON ((-5001744 -2795037... #> 4        5 26.08667 1094.780 POLYGON ((-4901744 -2795037... #> 5        8 26.70000 1357.180 POLYGON ((-5301744 -2895037... #> 6        9 25.96667 1244.293 POLYGON ((-5201744 -2895037... #> 7       10 24.76333 1242.727 POLYGON ((-5101744 -2895037... #> 8       11 24.14000 1335.097 POLYGON ((-5001744 -2895037... #> 9       12 24.22000 1208.630 POLYGON ((-4901744 -2895037... #> 10      13 24.13143 1073.974 POLYGON ((-4801744 -2895037... #>  #> $future_2 #> Simple feature collection with 26 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -5301744 ymin: -3295037 xmax: -4701744 ymax: -2795037 #> Projected CRS: WGS 84 / NSIDC EASE-Grid 2.0 Global #> First 10 features: #>    cell_id     bio1     bio12                       geometry #> 1        2 32.54667 1002.3133 POLYGON ((-5201744 -2795037... #> 2        3 31.60667  968.6433 POLYGON ((-5101744 -2795037... #> 3        4 31.71333 1037.1100 POLYGON ((-5001744 -2795037... #> 4        5 31.21000  954.8067 POLYGON ((-4901744 -2795037... #> 5        8 32.08857 1194.4057 POLYGON ((-5301744 -2895037... #> 6        9 31.30667 1099.7000 POLYGON ((-5201744 -2895037... #> 7       10 30.02667 1097.2733 POLYGON ((-5101744 -2895037... #> 8       11 29.32333 1175.0833 POLYGON ((-5001744 -2895037... #> 9       12 29.26333 1048.3767 POLYGON ((-4901744 -2895037... #> 10      13 28.95429  901.8114 POLYGON ((-4801744 -2895037... #>  #> $current #> Simple feature collection with 27 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -5301744 ymin: -3295037 xmax: -4701744 ymax: -2795037 #> Projected CRS: WGS 84 / NSIDC EASE-Grid 2.0 Global #> First 10 features: #>    cell_id     bio1    bio12                       geometry #> 1        2 21.98257 270.4756 POLYGON ((-5201744 -2795037... #> 2        3 21.23959 267.7715 POLYGON ((-5101744 -2795037... #> 3        4 21.46965 264.9304 POLYGON ((-5001744 -2795037... #> 4        5 21.07145 275.6752 POLYGON ((-4901744 -2795037... #> 5        8 21.50790 308.3119 POLYGON ((-5301744 -2895037... #> 6        9 20.93666 295.2626 POLYGON ((-5201744 -2895037... #> 7       10 19.79140 287.9215 POLYGON ((-5101744 -2895037... #> 8       11 19.24563 278.8340 POLYGON ((-5001744 -2895037... #> 9       12 19.49505 278.0062 POLYGON ((-4901744 -2895037... #> 10      13 19.62922 273.3334 POLYGON ((-4801744 -2895037... #>   # Select scenarios: sa <- select_scenarios(sa, scenarios_names = c(\"future_1\"))  # Setting stationary variables in scenarios: sa <- sdm_area(rivs[c(1:200),], cell_size = 100000, crs = 6933, lines_as_sdm_area = TRUE) |>   add_predictors(bioc) |>   add_scenarios(scen, stationary = c(\"LENGTH_KM\", \"DIST_DN_KM\")) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables. #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables."},{"path":"https://luizesser.github.io/caretSDM/reference/algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Caret Algorithms — algorithms","title":"Caret Algorithms — algorithms","text":"data.frame characteristics algorithm available caretSDM. column different characteristics. can helpful experienced modelers select algorithms. See source selection method using data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Caret Algorithms — algorithms","text":"","code":"algorithms"},{"path":"https://luizesser.github.io/caretSDM/reference/algorithms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Caret Algorithms — algorithms","text":"## `algorithms` data.frame 230 rows 60 columns: X Algorithms names columns Algorithms attributes","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/algorithms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Caret Algorithms — algorithms","text":"<https://topepo.github.io/caret/models-clustered--tag-similarity.html>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/bioc.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioclimatic Variables — bioc","title":"Bioclimatic Variables — bioc","text":"stars object bioclimatic variables (bio1, bio4 bio12) Parana state Brazil. Data obtained WorldClim 2.1 10 arc-min resolution.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/bioc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioclimatic Variables — bioc","text":"","code":"bioc"},{"path":"https://luizesser.github.io/caretSDM/reference/bioc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bioclimatic Variables — bioc","text":"## `bioc` stars 1 attribute 3 bands: bio1 Annual Mean Temperature bio4 Temperature Seasonality bio12 Annual Precipitation","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/bioc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bioclimatic Variables — bioc","text":"<https://www.worldclim.org/>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/buffer_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create buffer around occurrences — buffer_sdm","title":"Create buffer around occurrences — buffer_sdm","text":"Create buffer around records occ_data used study area","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/buffer_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create buffer around occurrences — buffer_sdm","text":"","code":"buffer_sdm(occ_data, size = NULL, crs = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/buffer_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create buffer around occurrences — buffer_sdm","text":"occ_data data.frame object species, decimalLongitude decimalLatitude columns. Usually output GBIF_data. size numeric. distance record margin buffer (.e. buffer radius). crs numeric. Indicates EPSG occ_data .","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/buffer_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create buffer around occurrences — buffer_sdm","text":"sf buffer around occ_data records.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/buffer_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create buffer around occurrences — buffer_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/buffer_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create buffer around occurrences — buffer_sdm","text":"","code":"# Create sdm_area object: study_area <- buffer_sdm(occ, size=50000, crs=6933) plot(study_area)"},{"path":"https://luizesser.github.io/caretSDM/reference/caretSDM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"caretSDM: Build Species Distribution Modeling using 'caret' — caretSDM-package","title":"caretSDM: Build Species Distribution Modeling using 'caret' — caretSDM-package","text":"Use machine learning algorithms advanced geographic information system tools build Species Distribution Modeling extensible modern fashion.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/caretSDM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"caretSDM: Build Species Distribution Modeling using 'caret' — caretSDM-package","text":"Maintainer: Luíz Fernando Esser luizesser@gmail.com (ORCID) [copyright holder] Authors: Dayani Bailly (ORCID) Edivando Couto (ORCID) José Hilário Delconte Ferreira (ORCID) Reginaldo Ré (ORCID) Valéria Batista (ORCID)","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Presence data cleaning routine — data_clean","title":"Presence data cleaning routine — data_clean","text":"Data cleaning wrapper using CoordinateCleaner package.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presence data cleaning routine — data_clean","text":"","code":"data_clean(occ, pred = NULL,            species = NA, lon = NA, lat = NA,            capitals = TRUE,            centroids = TRUE,            duplicated = TRUE,            identical = TRUE,            institutions = TRUE,            invalid = TRUE,            terrestrial = TRUE,            independent_test = TRUE)"},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presence data cleaning routine — data_clean","text":"occ occurrences_sdm object input_sdm. pred sdm_area object. occ input_sdm object predictors data, pred obtained . species character stating name column species names occ (see details). lon character stating name column longitude occ (see details). lat character stating name column latitude occ (see details). capitals Boolean turn /exclusion countries capitals coordinates (see ?cc_cap) centroids Boolean turn /exclusion countries centroids coordinates (see ?cc_cen) duplicated Boolean turn /exclusion duplicated records (see ?cc_dupl) identical Boolean turn /exclusion records identical lat/long values (see ?cc_equ) institutions Boolean turn /exclusion biodiversity institutions coordinates (see ?cc_inst) invalid Boolean turn /exclusion invalid coordinates (see ?cc_val) terrestrial Boolean turn /exclusion coordinates falling sea (see ?cc_sea) independent_test Boolean. occ independent test data, data cleaning routine also applied .","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presence data cleaning routine — data_clean","text":"occurrences_sdm object input_sdm cleaned presence data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Presence data cleaning routine — data_clean","text":"user used GBIF_data function obtain species records, function may problems find column presences table species, longitude latitude information. regard, implemented parameters species, lon lat use can explicitly inform columns used. remain NA (standard) function try guess columns correct one.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Presence data cleaning routine — data_clean","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/data_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presence data cleaning routine — data_clean","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 50000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 3 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Clean coordinates (terrestrial is set to false to make the run quicker): i <- data_clean(i, terrestrial = FALSE) #> Cell_ids identified, removing duplicated cell_id. #> Testing country capitals #> Removed 0 records. #> Testing country centroids #> Removed 0 records. #> Testing duplicates #> Removed 0 records. #> Testing equal lat/lon #> Removed 0 records. #> Testing biodiversity institutions #> Removed 1 records. #> Testing coordinate validity #> Removed 0 records. #> Predictors identified, procceding with grid filter (removing NA and duplicated data)."},{"path":"https://luizesser.github.io/caretSDM/reference/gcms_ensembles.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble GCMs into one scenario — gcms_ensembles","title":"Ensemble GCMs into one scenario — gcms_ensembles","text":"ensembling method group different GCMs one SSP scenario","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/gcms_ensembles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble GCMs into one scenario — gcms_ensembles","text":"","code":"gcms_ensembles(i, gcms = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/gcms_ensembles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble GCMs into one scenario — gcms_ensembles","text":"input_sdm object. gcms GCM codes scenarios_names() group scenarios.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/gcms_ensembles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble GCMs into one scenario — gcms_ensembles","text":"input_sdm object grouped GCMs.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/gcms_ensembles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble GCMs into one scenario — gcms_ensembles","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/gcms_ensembles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble GCMs into one scenario — gcms_ensembles","text":"","code":"# Create sdm_area object: set.seed(1) sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa, scen) |> select_predictors(c(\"bio1\", \"bio12\")) #> Warning: Some variables in `variables_selected` are not present in `scen`. #> ℹ Using only variables present in `scen`: bio1, bio4, and bio12  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"random\", n_set = 2)  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"boot\",                                 number = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\")  # Train models: i <- train_sdm(i,                algo = c(\"naive_bayes\"),                ctrl=ctrl_sdm,                variables_selected = c(\"bio1\", \"bio12\")) |>   suppressWarnings() #> Loading required package: ggplot2 #> Loading required package: lattice #>  #> Attaching package: ‘caret’ #> The following object is masked from ‘package:caretSDM’: #>  #>     predictors  # Predict models: i  <- predict_sdm(i, th=0.8) #> [1] \"Projecting: 1/5\" #> [1] \"Projecting: 2/5\" #> [1] \"Projecting: 3/5\" #> [1] \"Projecting: 4/5\" #> [1] \"Projecting: 5/5\" #> [1] \"Ensembling...\" #> [1] \"ca_ssp245_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"ca_ssp585_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"mi_ssp245_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"mi_ssp585_2090\" #> [1] \"Araucaria angustifolia\" #> [1] \"current\" #> [1] \"Araucaria angustifolia\"  #' # Ensemble GCMs: i <- gcms_ensembles(i, gcms = c(\"ca\", \"mi\")) #> New names: #> • `cell_id` -> `cell_id...1` #> • `mean_occ_prob` -> `mean_occ_prob...2` #> • `wmean_AUC` -> `wmean_AUC...3` #> • `committee_avg` -> `committee_avg...4` #> • `cell_id` -> `cell_id...5` #> • `mean_occ_prob` -> `mean_occ_prob...6` #> • `wmean_AUC` -> `wmean_AUC...7` #> • `committee_avg` -> `committee_avg...8` #> New names: #> • `cell_id` -> `cell_id...1` #> • `mean_occ_prob` -> `mean_occ_prob...2` #> • `wmean_AUC` -> `wmean_AUC...3` #> • `committee_avg` -> `committee_avg...4` #> • `cell_id` -> `cell_id...5` #> • `mean_occ_prob` -> `mean_occ_prob...6` #> • `wmean_AUC` -> `wmean_AUC...7` #> • `committee_avg` -> `committee_avg...8` i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 418  #> Pseudoabsence methods         : #>     Method to obtain PAs      : random  #>     Number of PA sets         : 2  #>     Number of PAs in each set : 418  #> --------  Predictors  --------- #> Number of Predictors          : 2  #> Predictors Names              : bio1, bio12  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes  #> Variables Names               : bio1 bio12  #> Model Validation              : #>     Method                    : boot  #>     Number                    : 1  #>     Metrics                   : #> $`Araucaria angustifolia` #>          algo       ROC       TSS Sensitivity Specificity #> 1 naive_bayes 0.8567781 0.4410403       0.974         0.5 #>  #> --------  Predictions  -------- #> Ensembles                     : #>     Scenarios                 : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current _ssp245_2090 _ssp585_2090  #>     Methods                   : mean_occ_prob wmean_AUC committee_avg  #> Thresholds                    : #>     Method                    : threshold  #>     Criteria                  : 0.8"},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"input_sdm — input_sdm","title":"input_sdm — input_sdm","text":"function creates new input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"input_sdm — input_sdm","text":"","code":"input_sdm(...)"},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"input_sdm — input_sdm","text":"... Data used SDMs. Can occurrences /sdm_area object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"input_sdm — input_sdm","text":"input_sdm object containing: grid sf POLYGON geometry representing grid study area    LINESTRING sdm_area built LINESTRING sf. bbox Four corners bounding box (class bbox): minimum value X, minimum    value Y, maximum value X, maximum value Y cell_size numeric information regarding size cell used rescale    variables study area, representing also cell size grid. epsg character information EPSG used slots sdm_area. predictors character vector predictors names included sdm_area.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"input_sdm — input_sdm","text":"sdm_area used, can include predictors scenarios. case, input_sdm detect include scenarios predictors input_sdm output. Objects can included order, since function work detecting classes. returned object used throughout whole workflow apply functions.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"input_sdm — input_sdm","text":"Luiz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/input_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"input_sdm — input_sdm","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 50000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio4\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa, scen)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 3 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)"},{"path":"https://luizesser.github.io/caretSDM/reference/is_input_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"is_class functions to check caretSDM data classes. — is_input_sdm","title":"is_class functions to check caretSDM data classes. — is_input_sdm","text":"functions returns boolean check caretSDM object classes.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/is_input_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_class functions to check caretSDM data classes. — is_input_sdm","text":"","code":"is_input_sdm(x)  is_sdm_area(x)  is_occurrences(x)  is_predictors(x)  is_scenarios(x)  is_models(x)  is_predictions(x)"},{"path":"https://luizesser.github.io/caretSDM/reference/is_input_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_class functions to check caretSDM data classes. — is_input_sdm","text":"x Object tested.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/is_input_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_class functions to check caretSDM data classes. — is_input_sdm","text":"Boolean.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/is_input_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"is_class functions to check caretSDM data classes. — is_input_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/is_input_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is_class functions to check caretSDM data classes. — is_input_sdm","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 25000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  is_sdm_area(sa) #> [1] TRUE  is_input_sdm(sa) #> [1] FALSE"},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Area — join_area","title":"Join Area — join_area","text":"Join cell_id data sdm_area occurrences","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Area — join_area","text":"","code":"join_area(occ, pred)"},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Area — join_area","text":"occ occurrences object input_sdm. pred sdm_area object retrieve cell_id .","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join Area — join_area","text":"occurrences object cell_id record.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join Area — join_area","text":"function key SDM workflow. attaches cell_id values occ, deletes records outside pred allows use pseudoabsences. function also tests CRS occ pred equal, otherwise CRS pred used convert occ.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join Area — join_area","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/join_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join Area — join_area","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 50000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio4\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa, scen)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 3 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect."},{"path":"https://luizesser.github.io/caretSDM/reference/occ.html","id":null,"dir":"Reference","previous_headings":"","what":"Araucaria angustifolia occurrence data — occ","title":"Araucaria angustifolia occurrence data — occ","text":"data.frame object Araucaria angustifolia occurrence data obtained GBIF filtered Parana state sf.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Araucaria angustifolia occurrence data — occ","text":"","code":"occ"},{"path":"https://luizesser.github.io/caretSDM/reference/occ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Araucaria angustifolia occurrence data — occ","text":"## `occ` data.frame 420 rows 3 columns (EPSG:6933): species Species name decimalLongitude Longitude meters decimalLatitude Latitude meters","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occ.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Araucaria angustifolia occurrence data — occ","text":"<https://www.gbif.org>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrences Managing — occurrences_sdm","title":"Occurrences Managing — occurrences_sdm","text":"function creates manage occurrences objects.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrences Managing — occurrences_sdm","text":"","code":"occurrences_sdm(x,                 independent_test = NULL,                 p = 0.1,                 crs = NULL,                 independent_test_crs = NULL,                 ...)  n_records(i)  species_names(i)  get_coords(i)  occurrences_as_df(i)  add_occurrences(oc1, oc2)"},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occurrences Managing — occurrences_sdm","text":"x data.frame, tibble sf species records. independent_test Boolean. independet_test TRUE, fraction data kept independent testing. Otherwise, whole dataset x used. can also data.frame sf, species records used independent test. Structure names identical x. p Numeric. Fraction data used independent test. Standard 0.1. crs Numeric. CRS x. independent_test_crs Numeric. CRS independent_test data.frame. ... vector column names addressing columns species names, longitude latitude, respectively, x. input_sdm occurrences object. oc1 occurrences object summed . oc2 occurrences object summed .","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Occurrences Managing — occurrences_sdm","text":"occurrences object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Occurrences Managing — occurrences_sdm","text":"x must three columns: species, decimalLongitude decimalLatitude. sf necessary species column. n_records return number presence records species. species_names return species names. get_coords return data.frame coordinates species records. add_occurrences return occurrences. function sums two occurrences objects. can also sum occurrences object data.frame object. occurrences_as_df returns data.frame species names coordinates.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Occurrences Managing — occurrences_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/occurrences_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occurrences Managing — occurrences_sdm","text":"","code":"# Create occurrences: oc <- occurrences_sdm(occ, crs = 6933)"},{"path":"https://luizesser.github.io/caretSDM/reference/parana.html","id":null,"dir":"Reference","previous_headings":"","what":"Paraná State — parana","title":"Paraná State — parana","text":"sf object polygon Paraná state Brazil. subset brazilian map provided official government agency (IBGE)","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/parana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paraná State — parana","text":"","code":"parana"},{"path":"https://luizesser.github.io/caretSDM/reference/parana.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Paraná State — parana","text":"## `parana` sf 1 row 5 columns: GID0 State code CODIGOIB1 State's phone code NOMEUF2 Name state SIGLAUF3 Abbreviation state's name geom Geometry column sf","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/parana.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Paraná State — parana","text":"<https://www.ibge.gov.br/geociencias/cartas-e-mapas/bases-cartograficas-continuas/15759-brasil.html>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictors as PCA-axes — pca_predictors","title":"Predictors as PCA-axes — pca_predictors","text":"Transform predictors data PCA-axes.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictors as PCA-axes — pca_predictors","text":"","code":"pca_predictors(i, cumulative_proportion = 0.99)  pca_summary(i)  get_pca_model(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictors as PCA-axes — pca_predictors","text":"input_sdm object. cumulative_proportion numeric threshold cumulative proportion. Standard 0.99, meaning axes returned predictors sum 99 variance.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictors as PCA-axes — pca_predictors","text":"input_sdm object variables predictors scenarios transformed PCA-axes.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictors as PCA-axes — pca_predictors","text":"pca_predictors Transform predictors data PCA-axes. user wants use PCA-axes future scenarios, scenarios added PCA transformation (see examples). pca_summary Returns summary prcomp function. See ?stats::prcomp. get_pca_model Returns model built calculate PCA-axes.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predictors as PCA-axes — pca_predictors","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pca_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictors as PCA-axes — pca_predictors","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 50000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 3 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # PCA transformation: i <- pca_predictors(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/pdp_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Response to Variables — pdp_sdm","title":"Model Response to Variables — pdp_sdm","text":"Obtain Partial Dependence Plots (PDP) variable.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pdp_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Response to Variables — pdp_sdm","text":"","code":"pdp_sdm(i, spp = NULL, algo = NULL, variables_selected = NULL, mean.only = FALSE)  get_pdp_sdm(i, spp = NULL, algo = NULL, variables_selected = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/pdp_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Response to Variables — pdp_sdm","text":"input_sdm object. spp character vector species names obtain PDPs. NULL (standard), first species species_names() used. algo character containing algorithm obtain PDP. NULL (standard) algorithms mixed. variables_selected character. subset predictors ploted , can informed using parameter. mean.Boolean. mean curve plotted curve run included? Standard FALSE.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pdp_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Response to Variables — pdp_sdm","text":"plot (pdp_sdm) data.frame (get_pdp_sdm) PDP values.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/pdp_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model Response to Variables — pdp_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pdp_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Response to Variables — pdp_sdm","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"bioclim\", n_set=3)  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"repeatedcv\",                                 number = 2,                                 repeats = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\") # Train models: i <- train_sdm(i, algo = c(\"naive_bayes\"), ctrl=ctrl_sdm) #> Warning: There were missing values in resampled performance measures. # PDP plots: pdp_sdm(i) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  get_pdp_sdm(i) #> $naive_bayes #> # A tibble: 156 × 4 #>    id     yhat variable value #>    <chr> <dbl> <chr>    <dbl> #>  1 m1.1  0.996 bio1      15.9 #>  2 m1.1  0.996 bio1      16.1 #>  3 m1.1  0.998 bio1      16.3 #>  4 m1.1  0.998 bio1      16.6 #>  5 m1.1  0.999 bio1      16.8 #>  6 m1.1  0.999 bio1      17.1 #>  7 m1.1  1.000 bio1      17.3 #>  8 m1.1  1.000 bio1      17.6 #>  9 m1.1  1.000 bio1      17.8 #> 10 m1.1  0.999 bio1      18.1 #> # ℹ 146 more rows #>"},{"path":"https://luizesser.github.io/caretSDM/reference/plot_occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Methods for plot and mapview — plot_occurrences","title":"S3 Methods for plot and mapview — plot_occurrences","text":"function creates different plots depending input.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/plot_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Methods for plot and mapview — plot_occurrences","text":"","code":"plot_occurrences(i, spp_name = NULL, pa = TRUE)  plot_grid(i)  plot_predictors(i, variables_selected = NULL)  plot_scenarios(i, variables_selected = NULL, scenario = NULL)  plot_predictions(   i,   spp_name = NULL,   scenario = NULL,   id = NULL,   ensemble = TRUE,   ensemble_type = \"mean_occ_prob\" )  mapview_grid(i)  mapview_occurrences(i, spp_name = NULL, pa = TRUE)  mapview_predictors(i, variables_selected = NULL)  mapview_scenarios(i, variables_selected = NULL, scenario = NULL)  mapview_predictions(   i,   spp_name = NULL,   scenario = NULL,   id = NULL,   ensemble = TRUE,   ensemble_type = \"mean_occ_prob\" )"},{"path":"https://luizesser.github.io/caretSDM/reference/plot_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Methods for plot and mapview — plot_occurrences","text":"Object plotted. Can input_sdm, also occurrences sdm_area. spp_name character species plotted. NULL, first species plotted. pa Boolean. pseudoabsences plotted together? (implemented yet.) variables_selected character vector names variables plotted. scenario description id id models plotted (used ensemble = FALSE). Possible values row names get_validation_metrics(). ensemble Boolean. ensemble plotted (TRUE)? Otherwise prediction plotted ensemble_type Character type ensemble plotted. One : \"mean_occ_prob\", \"wmean_AUC\" \"committee_avg\"","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/plot_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Methods for plot and mapview — plot_occurrences","text":"plot mapview desired.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/plot_occurrences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Methods for plot and mapview — plot_occurrences","text":"implemented bestiary plots help visualizing process results. familiar mapview, consider using better visualize maps.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/plot_occurrences.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 Methods for plot and mapview — plot_occurrences","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict SDM models in new data — predict_sdm","title":"Predict SDM models in new data — predict_sdm","text":"function projects SDM models new scenarios","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict SDM models in new data — predict_sdm","text":"","code":"predict_sdm(m,             scen = NULL,             metric = \"ROC\",             th = 0.9,             tp = \"prob\",             ensembles = TRUE,             file = NULL,             add.current = TRUE)  get_predictions(i)  get_ensembles(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict SDM models in new data — predict_sdm","text":"m input_sdm models object. scen scenarios object NULL. NULL m input_sdm scenarios slot, used. metric character containing metric th calculated/applied. Default ROC. See ?mean_validation_metrics metrics available. th Thresholds metrics. Can numeric function. tp Type output retrieved. See details. ensembles Boolean. ensembles calculated? TRUE series ensembles obtained. See details. file File sabe predictions. add.current current scenario available, predictors used current scenario. input_sdm predictions object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict SDM models in new data — predict_sdm","text":"input_sdm predictions object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict SDM models in new data — predict_sdm","text":"tp parameter passed caret retrieve either probabilities classes (tp=\"prob\") raw output (tp=\"raw\"), vary depending algorithm used, usually classes (factor vector presences pseudoabsences). ensembles set TRUE, three ensembles currently implemented. mean_occ_prob mean occurrence probability, simple mean predictions, wmean_AUC mean_occ_prob, weighted AUC, committee_avg committee average, known majority rule, predictions binarized mean obtained. get_predictions returns list predictions scenarios, species, algorithms repetitions. Useful wish implement ensemble methods. get_ensembles returns matrix data.frames, column scenario row species. scenarios_names returns scenarios names sdm_area input_sdm object. get_scenarios_data returns data scenarios sdm_area input_sdm object.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict SDM models in new data — predict_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predict_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict SDM models in new data — predict_sdm","text":"","code":"# Create sdm_area object: set.seed(1) sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"random\", n_set=2)  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"boot\",                                 number = 1,                                 repeats = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\") #> Warning: `repeats` has no meaning for this resampling method.  # Train models: i <- train_sdm(i, algo = c(\"naive_bayes\"), ctrl=ctrl_sdm) |>   suppressWarnings()  # Predict models: i  <- predict_sdm(i, th = 0.8) #> [1] \"Projecting: 1/1\" #> [1] \"Ensembling...\" #> [1] \"current\" #> [1] \"Araucaria angustifolia\" i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 418  #> Pseudoabsence methods         : #>     Method to obtain PAs      : random  #>     Number of PA sets         : 2  #>     Number of PAs in each set : 418  #> --------  Predictors  --------- #> Number of Predictors          : 2  #> Predictors Names              : bio1, bio12  #> ---------  Scenarios  --------- #> Number of Scenarios           : 1  #> Scenarios Names               : current  #> -----------  Models  ---------- #> Algorithms Names              : naive_bayes  #> Variables Names               : bio1 bio12  #> Model Validation              : #>     Method                    : boot  #>     Number                    : 1  #>     Metrics                   : #> $`Araucaria angustifolia` #>          algo       ROC       TSS Sensitivity Specificity #> 1 naive_bayes 0.8567781 0.4410403       0.974         0.5 #>  #> --------  Predictions  -------- #> Ensembles                     : #>     Scenarios                 : current  #>     Methods                   : mean_occ_prob wmean_AUC committee_avg  #> Thresholds                    : #>     Method                    : threshold  #>     Criteria                  : 0.8"},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictors Names Managing — predictors","title":"Predictors Names Managing — predictors","text":"function manage predictors names sdm_area objects.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictors Names Managing — predictors","text":"","code":"predictors(x)  # S3 method for class 'sdm_area' predictors(x)  # S3 method for class 'input_sdm' predictors(x)  set_predictor_names(x, new_names)  # S3 method for class 'input_sdm' set_predictor_names(x, new_names)  # S3 method for class 'sdm_area' set_predictor_names(x, new_names)  get_predictor_names(x)  # S3 method for class 'sdm_area' get_predictor_names(x)  # S3 method for class 'input_sdm' get_predictor_names(x)  test_variables_names(sa, scen)  set_variables_names(s1 = NULL, s2 = NULL, new_names = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictors Names Managing — predictors","text":"x sdm_area input_sdm object get/set predictors names. new_names character vector size length(get_predictor_names(x)) sa sdm_area object. scen stars object scenarios. s1 stars object scenarios. s2 stars object scenarios sdm_area object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictors Names Managing — predictors","text":"predictors get_predictor_names return character vector predictors names. test_variables_names returns logical informing variables equal objects (TRUE) (FALSE). set_variables_names returns s1 object new names provided s2 new_names.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictors Names Managing — predictors","text":"functions available users can modify predictors names better represent . Use carefully avoid giving wrong names predictors. Useful make sure predictors names equal names scenarios. test_variables_names Tests variables stars object (scen argument) matches given sdm_area object (sa argument). set_variables_names set s1 object variables names s2 object variables names assign new names .","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predictors Names Managing — predictors","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/predictor_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictors Names Managing — predictors","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 50000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Check predictors' names: get_predictor_names(sa) #> [1] \"GID0\"      \"CODIGOIB1\" \"NOMEUF2\"   \"SIGLAUF3\"  \"bio1\"      \"bio4\"      #> [7] \"bio12\""},{"path":"https://luizesser.github.io/caretSDM/reference/print.input_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for input_sdm — print.input_sdm","title":"Print method for input_sdm — print.input_sdm","text":"Print method input_sdm","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.input_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for input_sdm — print.input_sdm","text":"","code":"# S3 method for class 'input_sdm' print(x, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/print.input_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for input_sdm — print.input_sdm","text":"x input_sdm object ... passed methods","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.input_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for input_sdm — print.input_sdm","text":"Concatenate structured characters showcase stored object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.models.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for models — print.models","title":"Print method for models — print.models","text":"Print method models","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for models — print.models","text":"","code":"# S3 method for class 'models' print(x, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/print.models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for models — print.models","text":"x models object ... passed methods","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for models — print.models","text":"Concatenate structured characters showcase stored object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for occurrences — print.occurrences","title":"Print method for occurrences — print.occurrences","text":"Print method occurrences","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for occurrences — print.occurrences","text":"","code":"# S3 method for class 'occurrences' print(x, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/print.occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for occurrences — print.occurrences","text":"x occurrences object ... passed methods","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for occurrences — print.occurrences","text":"Concatenate structured characters showcase stored object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for predictions — print.predictions","title":"Print method for predictions — print.predictions","text":"Print method predictions","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for predictions — print.predictions","text":"","code":"# S3 method for class 'predictions' print(x, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/print.predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for predictions — print.predictions","text":"x predictions object ... passed methods","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/print.predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for predictions — print.predictions","text":"Concatenate structured characters showcase stored object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Pseudoabsences — pseudoabsences","title":"Obtain Pseudoabsences — pseudoabsences","text":"function obtains pseudoabsences given set predictors.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Pseudoabsences — pseudoabsences","text":"","code":"pseudoabsences(occ,                pred = NULL,                method = \"random\",                n_set = 10,                n_pa = NULL,                variables_selected = NULL,                th = 0)  n_pseudoabsences(i)  pseudoabsence_method(i)  pseudoabsence_data(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Pseudoabsences — pseudoabsences","text":"occ occurrences_sdm input_sdm object. pred sdm_area object. NULL occ input_sdm, pred retrieved occ. method Method create pseudoabsences. One : \"random\", \"bioclim\" \"mahal.dist\". n_set numeric. Number datasets pseudoabsence create. n_pa numeric. Number pseudoabsences generated dataset created. NULL function prevents imbalance using number presence records (n_records(occ)). want address different sizes species, must provide named vector (n_records(occ)). variables_selected vector variables names used building pseudoabsences. used method \"random\". th numeric Threshold applied bioclim/mahal.dist projections. See details. input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Pseudoabsences — pseudoabsences","text":"occurrences_sdm input_sdm object pseudoabsence data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain Pseudoabsences — pseudoabsences","text":"pseudoabsences used SDM workflow obtain pseudoabsences, step necessary algorithms run. implemented three methods far: \"random\", self-explanatory, \"bioclim\" \"mahal.dist\". two last built idea pseudoabsences environmentally different presences. Thus, implemented two presence-methods infer distribution species. \"bioclim\" uses envelope approach (bioclimatic envelope), \"mahal.dist\" uses distance approach (mahalanobis distance). th parameter enters threshold binarize results. Pseudoabsences retrieved outside projected distribution species. n_pseudoabsences returns number pseudoabsences obtained per species. pseudoabsence_method returns method used obtain pseudoabsences. pseudoabsence_data returns list species names. species name lists pseudoabsences data class sf.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain Pseudoabsences — pseudoabsences","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/pseudoabsences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain Pseudoabsences — pseudoabsences","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 25000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio4\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"bioclim\")"},{"path":"https://luizesser.github.io/caretSDM/reference/rivs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hydrologic Variables — rivs","title":"Hydrologic Variables — rivs","text":"sf LINESTRING object hydrologic variables (LENGTH_KM DIST_DN_KM) Paraná state Brazil. Data obtained HydroSHEDS river flows >= 10m3/s.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/rivs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hydrologic Variables — rivs","text":"","code":"rivs"},{"path":"https://luizesser.github.io/caretSDM/reference/rivs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hydrologic Variables — rivs","text":"## `rivs` sf 1031 attributes 2 fiels: LENGTH_KM Length river reach segment, kilometers. DIST_DN_KM Distance reach outlet, .e., downstream pixel reach,   final downstream location along river network, kilometers. downstream   location either pour point ocean endorheic sink.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/rivs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hydrologic Variables — rivs","text":"<https://www.hydrosheds.org/>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/salm.html","id":null,"dir":"Reference","previous_headings":"","what":"Salminus brasiliensis occurrence data — salm","title":"Salminus brasiliensis occurrence data — salm","text":"data.frame object Salminus brasiliensis occurrence data obtained GBIF filtered Parana state sf.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/salm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Salminus brasiliensis occurrence data — salm","text":"","code":"salm"},{"path":"https://luizesser.github.io/caretSDM/reference/salm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Salminus brasiliensis occurrence data — salm","text":"## `salm` data.frame 46 rows 3 columns (EPSG:6933): species Species name decimalLongitude Longitude meters decimalLatitude Latitude meters","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/salm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Salminus brasiliensis occurrence data — salm","text":"<https://www.gbif.org>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/scen.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioclimatic Variables — scen","title":"Bioclimatic Variables — scen","text":"stars object bioclimatic variables (bio1, bio4 bio12) four future scenarios Parana state Brazil. Data MIROC6 GCM WorldClim 2.1 10 arc-min resolution.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/scen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioclimatic Variables — scen","text":"","code":"scen"},{"path":"https://luizesser.github.io/caretSDM/reference/scen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bioclimatic Variables — scen","text":"## `scen` stars 4 attribute 3 bands: ca_ssp245_2090 Intermediate scenario year 2090 GCM CanESM5 ca_ssp585_2090 Extreme  scenario year 2090 GCM CanESM5 mi_ssp245_2090 Intermediate scenario year 2090 GCM MIROC6 mi_ssp585_2090 Extreme  scenario year 2090 GCM MIROC6 bio1 Annual Mean Temperature bio4 Temperature Seasonality bio12 Annual Precipitation","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/scen.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bioclimatic Variables — scen","text":"<https://www.worldclim.org/>","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sdm_area object — sdm_area","title":"Create a sdm_area object — sdm_area","text":"function creates new sdm_area object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sdm_area object — sdm_area","text":"","code":"sdm_area(x, cell_size = NULL, crs = NULL, variables_selected = NULL,                 gdal = TRUE, crop_by = NULL, lines_as_sdm_area = FALSE)  get_sdm_area(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sdm_area object — sdm_area","text":"x shape raster. Usually shape sf class, rasters stars, rasterStack SpatRaster class also allowed. cell_size numeric. cell size used models. crs numeric. Indicates EPSG output grid . NULL, epsg x used. variables_selected character vector variables x used models. NULL (standard), variables x used. gdal Boolean. Force use GDAL available. See details. crop_by shape sf crop x. lines_as_sdm_area Boolean. x sf LINESTRING geometry, can used model species distribution lines grid cells. sdm_area input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sdm_area object — sdm_area","text":"sdm_area object containing: grid sf POLYGON geometry representing grid study area. cell_size numeric information regarding size cell used rescale    variables study area, representing also cell size grid.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a sdm_area object — sdm_area","text":"function returns sdm_area object grid built upon x parameter. two ways make grid resample variables sdm_area: without gdal. standard, gdal available machine used (gdal = TRUE), otherwise sf/stars used. get_sdm_area return grid built sdm_area.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a sdm_area object — sdm_area","text":"Luíz Fernando Esser (luizesser@gmail.com) Reginaldo Ré. https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sdm_area object — sdm_area","text":"","code":"# Create sdm_area object: sa_area <- sdm_area(parana, cell_size = 50000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Create sdm_area using a subset of rivs (lines): sa_rivers <- sdm_area(rivs[c(1:100),], cell_size = 100000, crs = 6933, lines_as_sdm_area = TRUE) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables."},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_as_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","title":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","text":"functions transform data caretSDM object used packages.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_as_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","text":"","code":"sdm_as_stars(x,              what = NULL,              spp = NULL,              scen = NULL,              id = NULL,              ens = NULL)  sdm_as_raster(x, what = NULL, spp = NULL, scen = NULL, id = NULL, ens = NULL)  sdm_as_terra(x, what = NULL, spp = NULL, scen = NULL, id = NULL, ens = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_as_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","text":"x caretSDM object. Sometimes multiple data inside x transformed. parameter allows users specify needs converted.can one : \"predictors\", \"scenarios\", \"predictions\" \"ensembles\". spp character. species converted? scen character. scenario converted? id character. id converted? ens character. ensemble converted?","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_as_stars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","text":"output desired class.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_as_stars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/sdm_as_stars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sdm_as_X functions to transform caretSDM data into other classes. — sdm_as_stars","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"random\", n_set=2)  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"boot\",                                 number = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\")  # Train models: i <- train_sdm(i, algo = c(\"naive_bayes\"), ctrl=ctrl_sdm) |>   suppressWarnings()  # Predict models: i  <- predict_sdm(i, th=0.8) #> [1] \"Projecting: 1/1\" #> [1] \"Ensembling...\" #> [1] \"current\" #> [1] \"Araucaria angustifolia\"  # Transform in stars: sdm_as_stars(i) #> stars object with 1 dimensions and 2 attributes #> attribute(s): #>                        Min.    1st Qu.     Median       Mean    3rd Qu. #> cell_id        2.0000000000 10.5000000 18.0000000 18.1111111 25.5000000 #> mean_occ_prob  0.0001950093  0.3517835  0.8884193  0.6700133  0.9488596 #>                      Max. #> cell_id        34.0000000 #> mean_occ_prob   0.9983319 #> dimension(s): #>          from to                       refsys point #> geometry    1 27 WGS 84 / NSIDC EASE-Grid ... FALSE #>                                                                 values #> geometry POLYGON ((-5201744 -27950...,...,POLYGON ((-4801744 -31950..."},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates performance across resamples — summary_sdm","title":"Calculates performance across resamples — summary_sdm","text":"function used caret::trainControl(summaryFunction=summary_sdm) calculate performance metrics across resamples.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates performance across resamples — summary_sdm","text":"","code":"summary_sdm(data, lev = NULL, model = NULL, custom_fun=NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates performance across resamples — summary_sdm","text":"data data.frame observed predicted values. lev character vector factors levels response. model Models names taken train object. custom_fun custom function applied models (yet implemented).","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates performance across resamples — summary_sdm","text":"input_sdm predictions object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates performance across resamples — summary_sdm","text":"See ?caret::defaultSummary details options pass caret::trainControl.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates performance across resamples — summary_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/summary_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates performance across resamples — summary_sdm","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"bioclim\")  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"repeatedcv\",                                 number = 2,                                 repeats = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\")  # Train models: i <- train_sdm(i, algo = c(\"naive_bayes\"), ctrl=ctrl_sdm) |> suppressWarnings()"},{"path":"https://luizesser.github.io/caretSDM/reference/tidyverse-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyverse methods for caretSDM objects — select_predictors","title":"Tidyverse methods for caretSDM objects — select_predictors","text":"Set functions facilitate use caretSDM tidyverse grammatics.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/tidyverse-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidyverse methods for caretSDM objects — select_predictors","text":"","code":"select_predictors(x, ...)  # S3 method for class 'sdm_area' select(.data, ...)  # S3 method for class 'input_sdm' select(.data, ...)  # S3 method for class 'sdm_area' mutate(.data, ...)  # S3 method for class 'input_sdm' mutate(.data, ...)  # S3 method for class 'sdm_area' filter(.data, ..., .by, .preserve)  # S3 method for class 'input_sdm' filter(.data, ..., .by, .preserve)  # S3 method for class 'occurrences' filter(.data, ..., .by, .preserve)  filter_species(x, spp = NULL, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/tidyverse-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidyverse methods for caretSDM objects — select_predictors","text":"x sdm_area input_sdm object. ... character arguments pass given function. .data Data pass tidyr function. .See ?dplyr::filter. .preserve See ?dplyr::filter. spp Species filtered.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/tidyverse-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidyverse methods for caretSDM objects — select_predictors","text":"transformed sdm_area/input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/tidyverse-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidyverse methods for caretSDM objects — select_predictors","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 25000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio4\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables."},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Train SDM models — train_sdm","title":"Train SDM models — train_sdm","text":"function wrapper fit models caret using caretSDM data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train SDM models — train_sdm","text":"","code":"train_sdm(occ,           pred = NULL,           algo,           ctrl = NULL,           variables_selected = NULL,           parallel = FALSE,           ...)  get_tune_length(i)  algorithms_used(i)  get_models(i)  get_validation_metrics(i)  mean_validation_metrics(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train SDM models — train_sdm","text":"occ occurrences input_sdm object. pred predictors object. occ input_sdm object, pred obtained . algo character vector. Algorithms used. complete list see (https://topepo.github.io/caret/available-models.html) caretSDM::algorithms. ctrl trainControl object used build models. See ?caret::trainControl. variables_selected vector variables used predictors. NULL, predictors names pred used. Can also selection method (e.g. 'vif'). parallel paralelization method used (yet implemented)? ... Additional arguments passed caret::train function. models input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train SDM models — train_sdm","text":"models input_sdm object.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train SDM models — train_sdm","text":"object algorithms table comparing algorithms available. function detects necessary packages available ask installation. happen just first time use algorithm. get_tune_length return length used grid-search tunning. algorithms_used return names algorithms used modeling process. get_models returns list trained models (class train) species. get_validation_metrics return list data.frame species complete values ROC, Sensitivity, Specificity, respectives Standard Deviations (SD) TSS algorithms pseudoabsence datasets used. mean_validation_metrics return list tibble species summarizing values ROC, Sensitivity, Specificity TSS algorithms used.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train SDM models — train_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/train_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train SDM models — train_sdm","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"bioclim\")  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"repeatedcv\",                                 number = 2,                                 repeats = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\")  # Train models: i <- train_sdm(i, algo = c(\"naive_bayes\"), ctrl=ctrl_sdm) |> suppressWarnings()"},{"path":"https://luizesser.github.io/caretSDM/reference/tsne_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"tSNE — tsne_sdm","title":"tSNE — tsne_sdm","text":"function calculates tSNE presences pseudoabsences data returns list plots.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/tsne_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tSNE — tsne_sdm","text":"","code":"tsne_sdm(occ, pred = NULL, variables_selected = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/tsne_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tSNE — tsne_sdm","text":"occ occurrences input_sdm object. pred predictors object. occ class input_sdm, pred retrieved . variables_selected Variable used t-SNE. can also 'vif', previously calculated.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/tsne_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tSNE — tsne_sdm","text":"list plots, plot tSNE given pseudoabsence dataset.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/tsne_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tSNE — tsne_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/use_mem.html","id":null,"dir":"Reference","previous_headings":"","what":"MacroEcological Models (MEM) in caretSDM — use_mem","title":"MacroEcological Models (MEM) in caretSDM — use_mem","text":"functions sums species records one. used data cleaning routine.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/use_mem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MacroEcological Models (MEM) in caretSDM — use_mem","text":"","code":"use_mem(x, add = TRUE, name = \"MEM\")"},{"path":"https://luizesser.github.io/caretSDM/reference/use_mem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MacroEcological Models (MEM) in caretSDM — use_mem","text":"x occurrences input_sdm object containing occurrences. add Logical. new MEM records added pool (TRUE) species output summed records (FALSE)? Standard TRUE. name new records named? Standard \"MEM\".","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/use_mem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MacroEcological Models (MEM) in caretSDM — use_mem","text":"input_sdm occurrences object MEM data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/use_mem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MacroEcological Models (MEM) in caretSDM — use_mem","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/use_mem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MacroEcological Models (MEM) in caretSDM — use_mem","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 25000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio4\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Use MEM: i <- use_mem(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/varImp_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of variable importance for models — varImp_sdm","title":"Calculation of variable importance for models — varImp_sdm","text":"function retrieves variable importance function ROC curves predictor.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/varImp_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of variable importance for models — varImp_sdm","text":"","code":"varImp_sdm(m, id = NULL, ...)"},{"path":"https://luizesser.github.io/caretSDM/reference/varImp_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of variable importance for models — varImp_sdm","text":"m models input_sdm object. id Vector model ids filter varImp calculation. ... Parameters passing caret::varImp().","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/varImp_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of variable importance for models — varImp_sdm","text":"data.frame variable importance data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/varImp_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculation of variable importance for models — varImp_sdm","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/varImp_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of variable importance for models — varImp_sdm","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 100000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # Pseudoabsence generation: i <- pseudoabsences(i, method=\"bioclim\")  # Custom trainControl: ctrl_sdm <- caret::trainControl(method = \"repeatedcv\",                                 number = 2,                                 repeats = 1,                                 classProbs = TRUE,                                 returnResamp = \"all\",                                 summaryFunction = summary_sdm,                                 savePredictions = \"all\")  # Train models: i <- train_sdm(i, algo = c(\"naive_bayes\"), ctrl=ctrl_sdm) |> suppressWarnings()  # Variable importance: varImp_sdm(i) #> $`Araucaria angustifolia` #>       mean sd #> bio1   100  0 #> bio12    0  0 #>"},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate VIF — vif_predictors","title":"Calculate VIF — vif_predictors","text":"Apply Variance Inflation Factor (VIF) calculation.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate VIF — vif_predictors","text":"","code":"vif_predictors(pred, area = \"all\", th = 0.5, maxobservations = 5000, variables_selected = NULL)  vif_summary(i)  selected_variables(i)"},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate VIF — vif_predictors","text":"pred input_sdm predictors object. area Character. area used vif selection? Standard \"\". th Threshold applied VIF routine. See ?usdm::vifcor. maxobservations Max observations use calculate VIF. variables_selected subset predictors used function, can informed using parameter. set NULL (standard) variables used. input_sdm retrieve information .","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate VIF — vif_predictors","text":"input_sdm predictors object VIF data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate VIF — vif_predictors","text":"vif_predictors wrapper function run usdm::vifcor caretSDM.","code":""},{"path":[]},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate VIF — vif_predictors","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/vif_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate VIF — vif_predictors","text":"","code":"# Create sdm_area object: sa <- sdm_area(parana, cell_size = 25000, crs = 6933) #> ! Making grid over study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include predictors: sa <- add_predictors(sa, bioc) |> select_predictors(c(\"bio1\", \"bio4\", \"bio12\")) #> ! Making grid over the study area is an expensive task. Please, be patient! #> ℹ Using GDAL to make the grid and resample the variables.  # Include scenarios: sa <- add_scenarios(sa, scen)  # Create occurrences: oc <- occurrences_sdm(occ, crs = 6933) |> join_area(sa) #> Warning: Some records from `occ` do not fall in `pred`. #> ℹ 2 elements from `occ` were excluded. #> ℹ If this seems too much, check how `occ` and `pred` intersect.  # Create input_sdm: i <- input_sdm(oc, sa)  # VIF calculation: i <- vif_predictors(i) i #>             caretSDM            #> ............................... #> Class                         : input_sdm #> --------  Occurrences  -------- #> Species Names                 : Araucaria angustifolia  #> Number of presences           : 418  #> --------  Predictors  --------- #> Number of Predictors          : 3  #> Predictors Names              : bio1, bio4, bio12  #> Area (VIF)                    : all #> Threshold                     : 0.5 #> Selected Variables (VIF)      : bio1, bio12  #> ---------  Scenarios  --------- #> Number of Scenarios           : 5  #> Scenarios Names               : ca_ssp245_2090 ca_ssp585_2090 mi_ssp245_2090 mi_ssp585_2090 current   # Retrieve information about vif: vif_summary(i) #> 1 variables from the 3 input variables have collinearity problem:  #>   #> bio4  #>  #> After excluding the collinear variables, the linear correlation coefficients ranges between:  #> min correlation ( bio12 ~ bio1 ):  -0.3450906  #> max correlation ( bio12 ~ bio1 ):  -0.3450906  #>  #> ---------- VIFs of the remained variables --------  #>   Variables      VIF #> 1      bio1 1.135187 #> 2     bio12 1.135187 selected_variables(i) #> [1] \"bio1\"  \"bio12\""},{"path":"https://luizesser.github.io/caretSDM/reference/write_ensembles.html","id":null,"dir":"Reference","previous_headings":"","what":"Write caretSDM data — write_ensembles","title":"Write caretSDM data — write_ensembles","text":"function exports caretSDM data.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/write_ensembles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write caretSDM data — write_ensembles","text":"","code":"write_ensembles(x, path = NULL, ext = \".tif\", centroid = FALSE)  write_predictions(x, path = NULL, ext = \".tif\", centroid = FALSE)  write_predictors(x, path = NULL, ext = \".tif\", centroid = FALSE)  write_models(x, path = NULL)  write_gpkg(x, file_path, file_name)  # S3 method for class 'sdm_area' write_gpkg(x, file_path, file_name)  write_occurrences(x, path = NULL, grid = FALSE, ...)  write_pseudoabsences(x, path = NULL, ext = \".csv\", centroid = FALSE)  write_grid(x, path = NULL, centroid = FALSE)  write_validation_metrics(x, path = NULL)"},{"path":"https://luizesser.github.io/caretSDM/reference/write_ensembles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write caretSDM data — write_ensembles","text":"x Object written. Can class input_sdm, occurrences, predictions models. path path filename proper extension (see details) directory save files . ext saved? centroid coordinates centroids cell included? Standard FALSE. file_path path save sdm_area GeoPackage file. file_name name sdm_area GeoPackage file saved without extension. grid Boolean. Return grid. ... Arguments pass sf::st_write write.csv.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/write_ensembles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write caretSDM data — write_ensembles","text":"return value, called side effects.","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/write_ensembles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write caretSDM data — write_ensembles","text":"ext can set accordingly desired output. Possible values .tif .asc rasters, .csv spreadsheet, also  one : c(\"bna\", \"csv\", \"e00\", \"gdb\", \"geojson\", \"gml\", \"gmt\", \"gpkg\", \"gps\", \"gtm\", \"gxt\", \"jml\", \"map\", \"mdb\", \"nc\", \"ods\", \"osm\", \"pbf\", \"shp\", \"sqlite\", \"vdv\", \"xls\", \"xlsx\"). path ideally provide folder. recommend using: results/what_are_you_writting. writting ensembles users advised run: path = \"results/ensembles\"","code":""},{"path":"https://luizesser.github.io/caretSDM/reference/write_ensembles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write caretSDM data — write_ensembles","text":"Luíz Fernando Esser (luizesser@gmail.com) https://luizfesser.wordpress.com","code":""},{"path":"https://luizesser.github.io/caretSDM/news/index.html","id":"caretsdm-110","dir":"Changelog","previous_headings":"","what":"caretSDM 1.1.0","title":"caretSDM 1.1.0","text":"CRAN release: 2025-07-09 Initial CRAN submission.","code":""}]
